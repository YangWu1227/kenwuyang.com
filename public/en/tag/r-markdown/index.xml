<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Markdown | Yang (Ken) Wu</title>
    <link>https://www.kenwuyang.com/en/tag/r-markdown/</link>
      <atom:link href="https://www.kenwuyang.com/en/tag/r-markdown/index.xml" rel="self" type="application/rss+xml" />
    <description>R Markdown</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Yang Wu</copyright><lastBuildDate>Tue, 01 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.kenwuyang.com/media/Sharing.png</url>
      <title>R Markdown</title>
      <link>https://www.kenwuyang.com/en/tag/r-markdown/</link>
    </image>
    
    <item>
      <title>Portfolio Optimization and Returns in R</title>
      <link>https://www.kenwuyang.com/en/post/portfolio-optimization-and-returns/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://www.kenwuyang.com/en/post/portfolio-optimization-and-returns/</guid>
      <description>
&lt;script src=&#34;https://www.kenwuyang.com/en/post/portfolio-optimization-and-returns/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#optimal-weights-for-a-five-asset-portfolio-minimum-variance&#34;&gt;Optimal Weights for a five-asset portfolio (Minimum Variance)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#implementation-in-r&#34;&gt;Implementation in R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optimal-weights-for-the-five-asset-portfolio-maximum-expected-return&#34;&gt;Optimal Weights for the five-asset portfolio (Maximum Expected Return)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#implementation-in-r-1&#34;&gt;Implementation in R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-a-portfolio&#34;&gt;Building a portfolio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#monthly-portfolio-returns-by-hand&#34;&gt;Monthly portfolio returns by hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monthly-portfolio-returns-in-xts&#34;&gt;Monthly portfolio returns in xts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monthly-portfolio-returns-in-the-tidyverse&#34;&gt;Monthly portfolio returns in the tidyverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monthly-portfolio-returns-in-tidyquant&#34;&gt;Monthly portfolio returns in tidyquant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compare-and-contrast-the-four-methods&#34;&gt;Compare and Contrast the four methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;       In this post, we will explore some finance topics— portfolio optimization and computing portfolio returns. My goal is to apply what I’ve learned in portfolio theory using R as the main tool of analysis. There are many advantages to using a GUI like MS Excel, but R has an amazing data analysis work flow— a sort of one-stop solution from initial data importation to data wrangling and transformation to computations and analysis and then finally to visualizing and reporting results. We will be using functions from several R packages— &lt;code&gt;xts&lt;/code&gt;, &lt;code&gt;PerformanceAnalytics&lt;/code&gt;, &lt;code&gt;PortfolioAnalytics&lt;/code&gt;, &lt;code&gt;tidyquant&lt;/code&gt;, &lt;code&gt;tidyverse&lt;/code&gt;. In particular, the &lt;code&gt;tidyquant&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/tidyquant/index.html&#34;&gt;package&lt;/a&gt; is a recent development that has markedly enriched R’s financial analytics infrastructure, enhancing its usability in finance. While I cover some theory in this post, my main focus will be on the implementation of these topics in R.&lt;/p&gt;
&lt;p&gt;       For more readings on the theory, I recommend &lt;a href=&#34;https://www.amazon.com/ISE-Essentials-Investments-Zvi-Bodie/dp/1260288390/&#34;&gt;Essentials of Investments&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/Practical-Portfolio-Performance-Measurement-Attribution/dp/0470059281/&#34;&gt;Practical Portfolio Performance Measurement and Attribution&lt;/a&gt;. To learn more about analyzing financial data in R, there is &lt;a href=&#34;http://www.reproduciblefinance.com/&#34;&gt;Reproducible Finance with R&lt;/a&gt;, which is a very practical book with a strong emphasis on application.&lt;/p&gt;
&lt;p&gt;       With that being said, let us get financial!&lt;/p&gt;
&lt;div id=&#34;optimal-weights-for-a-five-asset-portfolio-minimum-variance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal Weights for a five-asset portfolio (Minimum Variance)&lt;/h2&gt;
&lt;p&gt;       We will employ Markowitz’s Mean-Variance model as the framework for computing optimal weights, essentially treating the task as an “unconstrained” optimization problem. The objective of this optimization problem is one of minimization:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\text{Minimize}\hspace{2mm}(\sigma^{2}=\vec{W}^{T}\sum\vec{W}))
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to the sum of weights constraint and the box constraint:
&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{N} W_{i}=1 \quad \text { and } \hspace{3mm} \varepsilon_{i} \leq W_{i} \leq \delta_{i}
\]&lt;/span&gt;
where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\varepsilon_{i}=0.05 \hspace{3mm} \delta_{i}=0.6\)&lt;/span&gt; are the lower and upper bounds for the weights &lt;span class=&#34;math inline&#34;&gt;\(W_{i}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;       The minimization problem is a quadratic problem with linear constraints, since the variance formula is a quadratic function and the constraints are linear functions; this type of problem is well suited to be solved using a quadratic programming solver. The &lt;code&gt;PortfolioAnalytics&lt;/code&gt; package uses &lt;code&gt;ROI.plugin.quadprog&lt;/code&gt;, a plug-in for the “R” Optimization Infrastructure, to solve the problem. The solver can be specified with the optimize_method argument in &lt;code&gt;optimize.portfolio()&lt;/code&gt;. If optimize_method = “ROI” is specified, a default solver will be selected based on the optimization problem. The &lt;code&gt;glpk&lt;/code&gt; solver is the default solver for LP and MILP optimization problems. The &lt;code&gt;quadprog&lt;/code&gt; solver is the default solver for QP optimization problems.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;implementation-in-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementation in R&lt;/h3&gt;
&lt;p&gt;       For this task, we will import our data from Yahoo Finance. The five assets under examination are Exchange Traded Funds, which are funds that can be traded on an exchange like a stock. Exchange-traded funds are a type of investment fund that offers the best attributes of two popular assets: they have the diversification benefits of mutual funds and the ease with which stocks are traded. However, before we import any data, we must answer the following question: In what form do we want our data to be? Since we are in the world of finance, times series is the most common type of data. R has the &lt;code&gt;xts&lt;/code&gt; package to handle data that are indexed by date. Our task, therefore, reduces to the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Import daily prices from Yahoo Finance&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Convert daily prices to monthly return&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because we will be aggregating monthly returns to form a portfolio, we will need to compute the simple returns&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a vector of ticker symbols
symbols &amp;lt;- c(&amp;quot;SPY&amp;quot;, &amp;quot;EFA&amp;quot;, &amp;quot;IJS&amp;quot;, &amp;quot;EEM&amp;quot;, &amp;quot;AGG&amp;quot;)
# Load data from 2012 to today
# Specify the &amp;quot;to = &amp;quot; argument to specify an end date
prices &amp;lt;- quantmod::getSymbols(
  Symbols = symbols,
  src = &amp;quot;yahoo&amp;quot;,
  from = &amp;quot;2012-12-31&amp;quot;,
  auto.assign = TRUE,
  warnings = FALSE
) %&amp;gt;%
  # The map function takes an anonymous function and will return a list of five
  # The function Ad() extracts the daily adjusted price series
  purrr::map(.f = ~ quantmod::Ad(get(x = .x))) %&amp;gt;%
  # Use reduce() to merge the elements of .x interactively
  purrr::reduce(.f = merge) %&amp;gt;%
  # Use a replacement function to set column names to ticker symbols
  # This function is in prefix form
  # It is equivalent to colnames(x = prices) &amp;lt;- value
  `colnames&amp;lt;-`(value = symbols)
# Keep only the last reading of each month
# We could have chosen to keep only the first reading of each month
asset_returns_xts &amp;lt;- xts::to.monthly(
  x = prices,
  drop.time = TRUE,
  indexAt = &amp;quot;lastof&amp;quot;,
  OHLC = FALSE
) %&amp;gt;%
  # Compute simple returns
  # Log returns are time-additive but not portfolio additive
  PerformanceAnalytics::Return.calculate(method = &amp;quot;discrete&amp;quot;) %&amp;gt;%
  # Drop the first row since we lose 12/31/2012
  stats::na.omit()
# Keep only the xts returns, ticker symbols, and the prices series
rm(list = setdiff(x = ls(), y = c(&amp;quot;symbols&amp;quot;, &amp;quot;prices&amp;quot;, &amp;quot;asset_returns_xts&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Create Portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Examine the monthly simple returns for our five ETF&amp;#39;s
head(x = asset_returns_xts, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                  SPY         EFA         IJS          EEM           AGG
2013-01-31 0.05119052  0.03728466 0.053516334 -0.002930946 -0.0062115144
2013-02-28 0.01275821 -0.01288577 0.016306731 -0.022840526  0.0059086990
2013-03-31 0.03797176  0.01305398 0.041079862 -0.010182972  0.0009852088
2013-04-30 0.01921213  0.05018653 0.001223168  0.012158139  0.0096857020
2013-05-31 0.02360972 -0.03019051 0.042869516 -0.048279085 -0.0200111498&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create Portfolio object which is essentially a list object
min_var_portfolio &amp;lt;- PortfolioAnalytics::portfolio.spec(assets = symbols)
typeof(min_var_portfolio)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add constraints to the portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the full investment constraint that specifies that the weights must sum to 1
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = min_var_portfolio,
  type = &amp;quot;full_investment&amp;quot;
)
# Examine the constraint element by extracting min_var_portfolio[[&amp;quot;constraints&amp;quot;]][[1]]
str(pluck(.x = min_var_portfolio, &amp;quot;constraints&amp;quot;, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;List of 6
 $ type   : chr &amp;quot;full_investment&amp;quot;
 $ enabled: logi TRUE
 $ message: logi FALSE
 $ min_sum: num 1
 $ max_sum: num 1
 $ call   : language PortfolioAnalytics::add.constraint(portfolio = min_var_portfolio, type = &amp;quot;full_investment&amp;quot;)
 - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;weight_sum_constraint&amp;quot; &amp;quot;constraint&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the box constraint that ensure the weights are between 0.1 and 0.6
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = min_var_portfolio,
  type = &amp;quot;box&amp;quot;, min = 0.05, max = 0.6
)
# Examine the constraint element by extracting min_var_portfolio[[&amp;quot;constraints&amp;quot;]][[2]]
str(pluck(.x = min_var_portfolio, &amp;quot;constraints&amp;quot;, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;List of 5
 $ type   : chr &amp;quot;box&amp;quot;
 $ enabled: logi TRUE
 $ min    : Named num [1:5] 0.05 0.05 0.05 0.05 0.05
  ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;SPY&amp;quot; &amp;quot;EFA&amp;quot; &amp;quot;IJS&amp;quot; &amp;quot;EEM&amp;quot; ...
 $ max    : Named num [1:5] 0.6 0.6 0.6 0.6 0.6
  ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;SPY&amp;quot; &amp;quot;EFA&amp;quot; &amp;quot;IJS&amp;quot; &amp;quot;EEM&amp;quot; ...
 $ call   : language PortfolioAnalytics::add.constraint(portfolio = min_var_portfolio, type = &amp;quot;box&amp;quot;,      min = 0.05, max = 0.6)
 - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;box_constraint&amp;quot; &amp;quot;constraint&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add objective function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add objective to minimize variance
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.objective(
  portfolio = min_var_portfolio,
  # Minimize risk
  type = &amp;quot;risk&amp;quot;,
  # A character corresponding to a function name, var()
  name = &amp;quot;var&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run the optimization
global_min_portfolio &amp;lt;- PortfolioAnalytics::optimize.portfolio(
  R = asset_returns_xts,
  portfolio = min_var_portfolio,
  # This defaults to the &amp;quot;quadprog&amp;quot; solver
  optimize_method = &amp;quot;quadprog&amp;quot;,
  # Return additional information on the path or portfolios searched
  trace = TRUE
)
# Examine returned portfolio list object
global_min_portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;***********************************
PortfolioAnalytics Optimization
***********************************

Call:
PortfolioAnalytics::optimize.portfolio(R = asset_returns_xts, 
    portfolio = min_var_portfolio, optimize_method = &amp;quot;quadprog&amp;quot;, 
    trace = TRUE)

Optimal Weights:
  SPY   EFA   IJS   EEM   AGG 
0.213 0.087 0.050 0.050 0.600 

Objective Measure:
 StdDev 
0.01644 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;optimal-weights-for-the-five-asset-portfolio-maximum-expected-return&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal Weights for the five-asset portfolio (Maximum Expected Return)&lt;/h2&gt;
&lt;p&gt;       Now that we found the global minimum variance portfolio, we may be interested in finding the maximal expected return portfolio. The objective is one of maximization:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\text{Maximize}\hspace{2mm}(\vec{\mu}^{T}\vec{W})
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to the sum of weights constraint and the box constraint:
&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{N} W_{i}=1 \quad \text { and } \hspace{3mm} \varepsilon_{i} \leq W_{i} \leq \delta_{i}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       The optimization problem in this case is a linear programming problem, since the portfolio expected return formula is a linear function. This is best tackled using a linear programming solver. The package &lt;code&gt;PortfolioAnalytics&lt;/code&gt; uses the ROI package with the &lt;code&gt;glpk plugin&lt;/code&gt;, the GNU Linear Programming toolkit of R’s Optimization Infrastructure.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;implementation-in-r-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementation in R&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create Portfolio object
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::portfolio.spec(assets = symbols)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add constraints to the object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the full investment constraint that specifies the weights must sum to 1
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = max_exp_return_portfolio,
  type = &amp;quot;full_investment&amp;quot;
)
# Add the box constraint that ensure the weights are between 0.1 and 0.6
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = max_exp_return_portfolio,
  type = &amp;quot;box&amp;quot;, min = 0.05, max = 0.6
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add objective function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add objective to maximize mean returns
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.objective(
  portfolio = max_exp_return_portfolio,
  # Maximize expected returns
  type = &amp;quot;return&amp;quot;,
  # A character corresponding to a function name, mean()
  name = &amp;quot;mean&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run the optimization
global_max_portfolio &amp;lt;- PortfolioAnalytics::optimize.portfolio(
  R = asset_returns_xts,
  portfolio = max_exp_return_portfolio,
  # This defaults to the &amp;quot;glpk&amp;quot; solver
  optimize_method = &amp;quot;glpk&amp;quot;,
  # Return additional information on the path or portfolios searched
  trace = TRUE
)
# Examine returned portfolio list object
global_max_portfolio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;***********************************
PortfolioAnalytics Optimization
***********************************

Call:
PortfolioAnalytics::optimize.portfolio(R = asset_returns_xts, 
    portfolio = max_exp_return_portfolio, optimize_method = &amp;quot;glpk&amp;quot;, 
    trace = TRUE)

Optimal Weights:
 SPY  EFA  IJS  EEM  AGG 
0.60 0.05 0.25 0.05 0.05 

Objective Measure:
  mean 
0.0114 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;building-a-portfolio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Building a portfolio&lt;/h2&gt;
&lt;p&gt;       We have found two sets of optimal weights that yield portfolios that offer the lowest possible risk and the high possible expected return given two basic constraints. Our next task is to aggregate the monthly returns of the individual ETF’s to find the monthly returns of our five-asset portfolio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set optimal weights
weights &amp;lt;- pluck(.x = global_max_portfolio, &amp;quot;weights&amp;quot;)
# Check if the weights and symbols align
tibble(weights, symbols)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 2
  weights symbols
    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
1   0.6   SPY    
2   0.05  EFA    
3   0.250 IJS    
4   0.05  EEM    
5   0.05  AGG    &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Ensure that the weights vector sums up to 1
tibble(weights, symbols) %&amp;gt;%
  dplyr::summarize(total_weight = sum(weights))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 1
  total_weight
         &amp;lt;dbl&amp;gt;
1            1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The portfolio return in month, &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, is given by:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
r_{\text{portfolio,t}}=\sum_{i=1}^{5}W_{i}r_{i,t}
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;monthly-portfolio-returns-by-hand&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns by hand&lt;/h3&gt;
&lt;p&gt;       We can compute portfolio monthly returns using a brute force method:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute by hand
portfolio_returns_by_hand &amp;lt;-
  (weights[[1]] * asset_returns_xts[, 1]) +
  (weights[[2]] * asset_returns_xts[, 2]) +
  (weights[[3]] * asset_returns_xts[, 3]) +
  (weights[[4]] * asset_returns_xts[, 4]) +
  (weights[[5]] * asset_returns_xts[, 5])
# Name the series
portfolio_returns_by_hand &amp;lt;- `names&amp;lt;-`(portfolio_returns_by_hand, &amp;quot;Monthly portfolio returns&amp;quot;)
# Examine
head(portfolio_returns_by_hand, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           Monthly portfolio returns
2013-01-31                0.04550050
2013-02-28                0.01024073
2013-03-31                0.03324583
2013-04-30                0.01543459
2013-05-31                0.01995917&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-xts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in xts&lt;/h3&gt;
&lt;p&gt;       Another way to compute portfolio monthly returns is to use functions from the &lt;code&gt;PerformanceAnalytics&lt;/code&gt; package, which works well with &lt;code&gt;xts&lt;/code&gt; objects. We also adopt monthly re-balancing as a strategy. The re-balancing of investments is the action of keeping the portfolio weights consistent with the optimal weights. Note that re-balancing the weights every month may be unrealistic; in reality, the convention is often to re-balance quarterly or annually. For this example, however, we will re-balance monthly to be consistent with our brute force computation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute monthly portfolio returns
portfolio_returns_xts_rebalanced_monthly &amp;lt;-
  PerformanceAnalytics::Return.portfolio(
    R = asset_returns_xts,
    weights = weights,
    # Monthly re-balancing
    reblance_on = &amp;quot;months&amp;quot;,
    # Use simple/arithmetic chaining to aggregate returns
    geometric = FALSE
  ) %&amp;gt;%
  `colnames&amp;lt;-`(&amp;quot;Monthly_portfolio_returns&amp;quot;)
# Examine
head(portfolio_returns_xts_rebalanced_monthly, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           Monthly_portfolio_returns
2013-01-31                0.04550050
2013-02-28                0.01024073
2013-03-31                0.03324583
2013-04-30                0.01543459
2013-05-31                0.01995917&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;Return.portfolio(R, weights = NULL, wealth.index = FALSE, contribution = FALSE, geometric = TRUE, rebalance_on = c(NA, &#34;years&#34;, &#34;quarters&#34;, &#34;months&#34;, &#34;weeks&#34;, &#34;days&#34;), value = 1, verbose = FALSE, ...)&lt;/code&gt; calculates the returns of a portfolio with the same periodicity of the returns data.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-the-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in the tidyverse&lt;/h3&gt;
&lt;p&gt;       The &lt;code&gt;tidyverse&lt;/code&gt; is a collection of R packages designed with the same underlying philosophy, grammar, and data structures. Simply put, the “tidy” data structure that works well with tidyverse functions is one where every row is an observation and every column is a variable. If we re-examine the &lt;code&gt;xts&lt;/code&gt; object called “asset_returns_xts,” we see that every column is a returns series for a particular asset. This is inconsistent with the tidyverse data structure, and so we must convert the xts object to a tidy format for our computations. Ideally, we would like to have one column called “asset” that specifies the names of the ETF instead of having five individual columns of returns data. This idea will become clearer once we convert our xts object to a tibble.&lt;/p&gt;
&lt;p&gt;Now, examine the “tidy” data structure and compare it to the xts object created earlier:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FSA::headtail(asset_returns_long, n = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;          date asset       returns
1   2013-01-31   SPY  0.0511905160
2   2013-01-31   EFA  0.0372846569
3   2013-01-31   IJS  0.0535163338
4   2013-01-31   EEM -0.0029309465
5   2013-01-31   AGG -0.0062115144
521 2021-09-30   SPY -0.0224997875
522 2021-09-30   EFA -0.0017360987
523 2021-09-30   IJS -0.0316548170
524 2021-09-30   EEM -0.0198435604
525 2021-09-30   AGG -0.0001984158&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since our returns data is in a “tidy” format, computing portfolio monthly returns is very a straight forward. For those who are familiar with SQL, we are essentially using the CASE statement here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use vectorized if else statements to assign weights according to the asset column
potfolio_returns_dplyr_byhand &amp;lt;- asset_returns_long %&amp;gt;%
  group_by(asset) %&amp;gt;%
  mutate(
    weights = dplyr::case_when(
      asset == symbols[[1]] ~ weights[[1]],
      asset == symbols[[2]] ~ weights[[2]],
      asset == symbols[[3]] ~ weights[[3]],
      asset == symbols[[4]] ~ weights[[4]],
      asset == symbols[[5]] ~ weights[[5]]
    ),
    weighted_returns = weights * returns
  ) %&amp;gt;%
  # Group by date
  # We need to group by date so that the aggregate sum() function is carried out by month
  # For each date, the original series has 5 weighted returns, one for each ETF
  # The results should be 1 portfolio return (the sum of the 5 weighted returns) for each month
  dplyr::group_by(date) %&amp;gt;%
  # Compute monthly portfolio returns
  dplyr::summarize(Monthly_portfolio_returns = sum(weighted_returns))
# Examine the data
head(potfolio_returns_dplyr_byhand, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;summarize(.data, ..., .groups = NULL)&lt;/code&gt; creates a new data frame. It will have one (or more) rows for each combination of grouping variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-tidyquant&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in tidyquant&lt;/h3&gt;
&lt;p&gt;       The &lt;code&gt;tidyquant&lt;/code&gt; package gives us two ways to compute the portfolio monthly returns.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use function from the tidyquant
portfolio_returns_tq_rebalanced_monthly_method_1 &amp;lt;- asset_returns_long %&amp;gt;%
  tidyquant::tq_portfolio(
    assets_col = asset,
    returns_col = returns,
    weights = weights,
    col_rename = &amp;quot;Monthly_portfolio_returns&amp;quot;,
    rebalance_on = &amp;quot;months&amp;quot;
  )
# Examine
head(portfolio_returns_tq_rebalanced_monthly_method_1, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;tq_portfolio(data, assets_col, returns_col, weights = NULL, col_rename = NULL, ...)&lt;/code&gt; aggregates a group of returns by asset into portfolio returns.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       An alternative way to load data is to use the &lt;code&gt;tidyquant&lt;/code&gt; wrapper function, which automatically coerces the returns into a long tidy format:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load data
asset_returns_tq &amp;lt;- tidyquant::tq_get(
  x = symbols,
  get = &amp;quot;stock.prices&amp;quot;,
  from = &amp;quot;2012-12-31&amp;quot;
) %&amp;gt;%
  # The asset column is named symbol by default (see body(tidyquant::tq_get))
  dplyr::group_by(symbol) %&amp;gt;%
  # Select adjusted daily prices
  tidyquant::tq_transmute(
    select = adjusted,
    col_rename = &amp;quot;returns&amp;quot;,
    # This function is from quantmod
    mutate_fun = periodReturn,
    # These arguments are passed along to the mutate function quantmod::periodReturn
    period = &amp;quot;monthly&amp;quot;,
    # Simple returns
    type = &amp;quot;arithmetic&amp;quot;,
    # Do not return leading period data
    leading = FALSE,
    # This argument is passed along to xts::to.period, which is wrapped by quantmod::periodReturn
    # We use the last reading of each month to find percentage changes
    indexAt = &amp;quot;lastof&amp;quot;
  ) %&amp;gt;%
  dplyr::rename(asset = symbol) %&amp;gt;%
  na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;tq_get(x, get = &#34;stock.prices&#34;, complete_cases = TRUE, ...)&lt;/code&gt; gets data in tibble format. The most important argument is perhaps the dot-dot-dot, since these are the arguments passed to the underlying functions from the other packages that &lt;code&gt;tq_get()&lt;/code&gt; uses. There could be multiple layers of wrapper functions, and so it is best practice to read the documentations carefully.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;       A possibly more useful method of aggregating asset returns to portfolio returns is then to &lt;em&gt;map a tibble of ticker symbols and weights to the tibble of ticker symbols and monthly returns&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a tibble of weights
weights_tibble &amp;lt;- tibble(
  asset = symbols,
  weights = weights
)
head(weights_tibble, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 2
  asset weights
  &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;
1 SPY     0.6  
2 EFA     0.05 
3 IJS     0.250
4 EEM     0.05 
5 AGG     0.05 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Map the weights to the returns column using the asset column as the identifier
portfolio_returns_tq_rebalanced_monthly_method_2 &amp;lt;- asset_returns_tq %&amp;gt;%
  tidyquant::tq_portfolio(
    assets_col = asset,
    returns_col = returns,
    weights = weights_tibble,
    col_rename = &amp;quot;Monthly_portfolio_returns&amp;quot;,
    rebalance_on = &amp;quot;months&amp;quot;
  )
head(portfolio_returns_tq_rebalanced_monthly_method_2, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-and-contrast-the-four-methods&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare and Contrast the four methods&lt;/h3&gt;
&lt;p&gt;       We have covered a variety of different methods for aggregating asset monthly returns to portfolio monthly returns. As a sanity check, we want to ensure that these methods yield consistent results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;potfolio_returns_dplyr_byhand %&amp;gt;%
  # Rename the column
  rename(tidyverse_method = Monthly_portfolio_returns) %&amp;gt;%
  # Create three new columns that contain results for other methods
  dplyr::mutate(
    &amp;quot;equation_byhand&amp;quot; = zoo::coredata(x = portfolio_returns_by_hand),
    &amp;quot;tq_method_1&amp;quot; = portfolio_returns_tq_rebalanced_monthly_method_1[[&amp;quot;Monthly_portfolio_returns&amp;quot;]],
    &amp;quot;tq_method_2&amp;quot; = portfolio_returns_tq_rebalanced_monthly_method_2[[&amp;quot;Monthly_portfolio_returns&amp;quot;]],
    &amp;quot;xts_method&amp;quot; = zoo::coredata(portfolio_returns_xts_rebalanced_monthly)
  ) %&amp;gt;%
  purrr::modify_if(.p = is.numeric, .f = ~ round(x = .x, digits = 7)) %&amp;gt;%
  dplyr::select(-date) %&amp;gt;%
  # Examine
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 10 × 5
   tidyverse_method equation_byhand[,… tq_method_1 tq_method_2 xts_method[,&amp;quot;Mon…
              &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
 1           0.0455             0.0455      0.0455      0.0455            0.0455
 2           0.0102             0.0102      0.0102      0.0102            0.0102
 3           0.0332             0.0332      0.0332      0.0332            0.0332
 4           0.0154             0.0154      0.0154      0.0154            0.0154
 5           0.0200             0.0200      0.0200      0.0200            0.0200
 6          -0.0131            -0.0131     -0.0131     -0.0131           -0.0131
 7           0.0509             0.0509      0.0509      0.0509            0.0509
 8          -0.0292            -0.0292     -0.0292     -0.0292           -0.0292
 9           0.0436             0.0436      0.0436      0.0436            0.0436
10           0.0406             0.0406      0.0406      0.0406            0.0406&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;coredata(x, ...)&lt;/code&gt; is a generic function for extracting the core data contained in, a (more complex) object and replacing it. The replacement function is &lt;code&gt;coredata&amp;lt;-&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;       As can be seen, the results are all consistent. &lt;em&gt;Sigh of relief&lt;/em&gt;. For the upcoming posts, I also plan on tackling other topics in portfolio theory and to build off of what I’ve covered in this post. In particular, Python also has many great libraries— NumPy, SciPy, Quandl— all of which contain great tools for financial analysis. Utilizing R’s tidyverse ecosystem and Python’s fast, memory-efficient methods, there’s great deal of content to cover.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
