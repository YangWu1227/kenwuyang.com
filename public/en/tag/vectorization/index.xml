<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vectorization | Yang (Ken) Wu</title>
    <link>https://www.kenwuyang.com/en/tag/vectorization/</link>
      <atom:link href="https://www.kenwuyang.com/en/tag/vectorization/index.xml" rel="self" type="application/rss+xml" />
    <description>Vectorization</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Yang Wu</copyright><lastBuildDate>Sat, 04 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.kenwuyang.com/media/Sharing.png</url>
      <title>Vectorization</title>
      <link>https://www.kenwuyang.com/en/tag/vectorization/</link>
    </image>
    
    <item>
      <title>Control Flow and Vectorization in R</title>
      <link>https://www.kenwuyang.com/en/post/control-flow-in-r/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://www.kenwuyang.com/en/post/control-flow-in-r/</guid>
      <description>
&lt;script src=&#34;https://www.kenwuyang.com/en/post/control-flow-in-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#control-flow&#34;&gt;Control Flow&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#for-loop&#34;&gt;for loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common-pitfalls&#34;&gt;Common pitfalls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#while-loop&#34;&gt;while loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#repeat-loop&#34;&gt;repeat loop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#forecast-pension-growth-under-compounding-interest-for-loop&#34;&gt;Forecast pension growth under compounding interest (for loop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#duration-of-a-fixed-payment-loan-under-monthly-compounding-interest-while-loop&#34;&gt;Duration of a fixed-payment loan under monthly compounding interest (while loop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#piece-wise-function-loop-and-vectorization&#34;&gt;Piece-wise function (Loop and vectorization)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sequence-for-loop-and-while-loop&#34;&gt;Sequence (for loop and while loop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geometric-and-harmonic-means-for-loop-and-vectorization&#34;&gt;Geometric and Harmonic Means (for loop and vectorization)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#find-the-sum-of-every-nth-element-of-a-vector&#34;&gt;Find the Sum of Every nth Element of a Vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chart-the-flow-of-a-simple-program&#34;&gt;Chart the flow of a simple program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-lotka-volterra-model-for-a-predator-prey-system&#34;&gt;The Lotka-Volterra Model for a predator-prey system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#find-the-minimum-of-a-vector&#34;&gt;Find the Minimum of a Vector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;control-flow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Control Flow&lt;/h2&gt;
&lt;p&gt;       Loops are an important programming concept, enabling programmers to execute blocks of code repeatedly, usually with varying options. This post will cover three types of loops— for, while, and repeat. We will then solve some problems using loops to demonstrate the power of iteration in programming. Whenever possible, we will attempt to solve problems using different methods, including different types of loops and parallel processing. Many of R’s functions are vectorized, meaning that the function will operate on all elements of a vector without needing to loop through and act on each element one at a time. We will leverage this unique feature of R to show that many problems that seem to involve loops can actually be solved differently in R, although the programs may be harder to intuit.&lt;/p&gt;
&lt;p&gt;       For more readings on control flows in R, I suggest starting with Hadley Wickham’s &lt;a href=&#34;https://adv-r.hadley.nz/&#34;&gt;Advance R&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/Introduction-Scientific-Programming-Simulation-Chapman/dp/1466569999&#34;&gt;Introduction to Scientific Programming and Simulation Using R&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;for-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;for loop&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;for%20loop.png&#34; width=&#34;70%&#34; height=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Basic syntax:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (item in vector) perform_action&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For each item in vector, perform_action is called once; updating the value of item each time. There are two ways to terminate a for loop early:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;next exits the current iteration&lt;/li&gt;
&lt;li&gt;break exits the entire for loop&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in 1:10) {
  if (i &amp;lt; 3) {
    next
  }

  print(i)

  if (i &amp;gt; 5) {
    break
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 3
[1] 4
[1] 5
[1] 6&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;common-pitfalls&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Common pitfalls&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Use &lt;code&gt;seq_along(x)&lt;/code&gt; to generate the sequence in &lt;code&gt;for()&lt;/code&gt; since it always returns a value the same length as x, even when x is a length zero vector:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Declare variables
means &amp;lt;- c()
out &amp;lt;- vector(&amp;quot;list&amp;quot;, length(means))
# For loop
for (i in seq_along(means)) {
  out[[i]] &amp;lt;- rnorm(10, means[[i]])
}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;When iterating over S3 vectors, loops typically strip the attributes. Use [[ to work around this caveat:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Date
xs &amp;lt;- as.Date(c(&amp;quot;2020-01-01&amp;quot;, &amp;quot;2010-01-01&amp;quot;))
# Loop
for (i in seq_along(xs)) {
  print(xs[[i]] + 10)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;2020-01-11&amp;quot;
[1] &amp;quot;2010-01-11&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;while-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;while loop&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;while%20loop.png&#34; width=&#34;70%&#34; height=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Basic syntax:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;while (condition) {
  expression_1
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a while command is executed, logical_expression is evaluated first. If it is true, then the group expressions in {} is executed. Control is then passed back to the start of the command: if logical_expression is still TRUE then the grouped expressions are executed again, and so on. For the loop to stop, logical_expression must eventually be FALSE. To achieve this, logical_expression usually depends on a variable that is altered within the grouped expressions.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;repeat-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;repeat loop&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;repeat%20loop.png&#34; width=&#34;70%&#34; height=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Basic syntax:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;repeat{
  expression_1
  ...

  if (condition) {
    break
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a simple loop that will run the same statement or a group of statements repeatedly until the stop condition has been encountered. Repeat loop does not have any condition to terminate the loop, a programmer must specifically place a condition within the loop’s body and use the declaration of a break statement to terminate this loop. If no condition is present in the body of the repeat loop then it will iterate infinitely.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;forecast-pension-growth-under-compounding-interest-for-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Forecast pension growth under compounding interest (for loop)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Annual interest rate
r &amp;lt;- 0.11
# Forecast duration (in years)
term &amp;lt;- 10
# Time between payments (in years)
period &amp;lt;- 1 / 12
# Amount deposited each period
payments &amp;lt;- 100&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Calculations. The function &lt;code&gt;ceiling()&lt;/code&gt; takes a single numeric argument x and returns a numeric vector containing the &lt;em&gt;smallest integers not less than the corresponding elements of x&lt;/em&gt;. On the other hand, &lt;code&gt;floor()&lt;/code&gt; takes a single numeric argument x and returns a numeric vector containing the &lt;em&gt;largest integers not greater than the corresponding elements of x&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Number of payments
n &amp;lt;- floor(term / period)
# Pre-allocate pension container
pension &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = n)
# Object size
lobstr::obj_size(pension)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1,008 B&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use seq_along
seq_along(pension)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For loop (compounded monthly)
for (i in seq_along(pension)) {
  pension[[i + 1]] &amp;lt;- pension[[i]] * (1 + r * period) + payments
}
# New object size
lobstr::obj_size(pension)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1,016 B&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Graph the output&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Time
time &amp;lt;- (0:n) * period
# Plot
ggplot(data = tibble(time, pension), mapping = aes(x = time, y = pension)) +
  geom_point(color = &amp;quot;orange&amp;quot;) +
  labs(
    title = &amp;quot;Forecast of Pension Value&amp;quot;,
    x = &amp;quot;Time (years)&amp;quot;, y = &amp;quot;Pension Value ($)&amp;quot;
  ) +
  theme(
    panel.background = element_rect(fill = &amp;quot;grey97&amp;quot;),
    panel.grid = element_blank()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.kenwuyang.com/en/post/control-flow-in-r/index.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;duration-of-a-fixed-payment-loan-under-monthly-compounding-interest-while-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Duration of a fixed-payment loan under monthly compounding interest (while loop)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Annual interest rate
r &amp;lt;- 0.11
# Time between repayments (in years)
period &amp;lt;- 1 / 12
# Initial principal
initial_principal &amp;lt;- 1000
# Fixed payment amount
payments &amp;lt;- 12&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Calculations&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Initialize variables
time &amp;lt;- 0
principal &amp;lt;- initial_principal
# While loop
while (principal &amp;gt; 0) {
  # Time (in years)
  time &amp;lt;- time + period
  # Principal payments
  principal &amp;lt;- principal * (1 + r * period) - payments
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cat(&amp;quot;Fixed-payment loan will be repaid in&amp;quot;, time, &amp;quot;years\n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Fixed-payment loan will be repaid in 13.25 years&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;piece-wise-function-loop-and-vectorization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Piece-wise function (Loop and vectorization)&lt;/h2&gt;
&lt;p&gt;Consider the function &lt;span class=&#34;math inline&#34;&gt;\(y=f(x)\)&lt;/span&gt; defined by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When &lt;span class=&#34;math inline&#34;&gt;\(x\leq 0\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(f(x)=-x^{3}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;span class=&#34;math inline&#34;&gt;\(x\in(0,1]\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(f(x)=x^{2\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;1\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(f(x)=\sqrt{x}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Implement the function using for loop:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Define x
x_vals &amp;lt;- seq.int(from = -2, to = 2, by = 0.1)
# Initialize sequence
seq &amp;lt;- seq_along(x_vals)
# Pre-allocate container for y values
y_vals &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = length(x_vals))
# For loop
for (i in seq) {

  # Set x values
  x &amp;lt;- x_vals[[i]]

  if (x &amp;lt;= 0) {
    y &amp;lt;- -x^3
  } else if (x &amp;gt; 0 &amp;amp; x &amp;lt;= 1) {
    y &amp;lt;- x^2
  } else if (x &amp;gt; 1) {
    y &amp;lt;- sqrt(x)
  }

  # Compute y values and store in the container vector
  y_vals[[i]] &amp;lt;- y
}
# Plot the function
ggplot(data = tibble(x_vals, y_vals)) +
  geom_line(mapping = aes(x = x_vals, y = y_vals), color = &amp;quot;blue&amp;quot;) +
  labs(
    title = &amp;quot;Piecewise Function&amp;quot;,
    x = &amp;quot;x&amp;quot;, y = &amp;quot;y&amp;quot;
  ) +
  theme(
    panel.background = element_rect(fill = &amp;quot;grey97&amp;quot;),
    panel.grid = element_blank()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.kenwuyang.com/en/post/control-flow-in-r/index.en_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the function using &lt;code&gt;case_when()&lt;/code&gt; (Note that the function is &lt;span class=&#34;math inline&#34;&gt;\(-x^3\)&lt;/span&gt; when &lt;span class=&#34;math inline&#34;&gt;\(x \leq 0\)&lt;/span&gt;; hence the negative sign in front of x)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Vectorization
y_vals_vectorized &amp;lt;- case_when(
  x_vals &amp;lt;= 0 ~ -x_vals^3,
  x_vals &amp;gt; 0 &amp;amp; x_vals &amp;lt;= 1 ~ x_vals^2,
  x_vals &amp;gt; 1 ~ sqrt(x_vals)
)
y_vals_vectorized&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] 8.000000 6.859000 5.832000 4.913000 4.096000 3.375000 2.744000 2.197000
 [9] 1.728000 1.331000 1.000000 0.729000 0.512000 0.343000 0.216000 0.125000
[17] 0.064000 0.027000 0.008000 0.001000 0.000000 0.010000 0.040000 0.090000
[25] 0.160000 0.250000 0.360000 0.490000 0.640000 0.810000 1.000000 1.048809
[33] 1.095445 1.140175 1.183216 1.224745 1.264911 1.303840 1.341641 1.378405
[41] 1.414214&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;sequence-for-loop-and-while-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sequence (for loop and while loop)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Let &lt;span class=&#34;math inline&#34;&gt;\(h(x, n)=1+x+x^{2}+\cdots+x^{n}=\sum_{i=0}^{n} x^{i}\)&lt;/span&gt;. Let us implement this sum of a geometric sequence using a for loop:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function
sum_of_sequence_for_loop &amp;lt;- function(x, n) {

  # Initialize sequence
  seq &amp;lt;- 0:n
  # Pre-allocate container
  terms &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = (n + 1))
  # Loop
  for (i in seq) {
    terms[[i + 1]] &amp;lt;- x^i
  }

  # Sum
  sum(terms)
}
# Test
sum_of_sequence_for_loop(x = 0.3, n = 55)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1.428571&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum_of_sequence_for_loop(x = 6.6, n = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 4243336&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum_of_sequence_for_loop(x = 1, n = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Using a while loop:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function
sum_of_sequence_while_loop &amp;lt;- function(x, n) {

  # Initialize i
  i &amp;lt;- 0
  # Pre-allocate container
  terms &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = (n + 1))
  # Loop
  while (i &amp;lt;= n) {
    terms[[i + 1]] &amp;lt;- x^i
    i &amp;lt;- i + 1
  }

  # Sum
  sum(terms)
}
# Test
sum_of_sequence_while_loop(x = 0.3, n = 55)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1.428571&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum_of_sequence_while_loop(x = 6.6, n = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 4243336&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum_of_sequence_while_loop(x = 1, n = 46)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 47&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Implement using parallel processing— vectorization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function
sum_of_sequence_vectorized &amp;lt;- function(x, n) {

  # Create vector of x
  vector_of_x &amp;lt;- rep(x = x, times = n + 1)

  # Create vector of exponents
  vector_of_exponents &amp;lt;- seq.int(from = 0, to = n, by = 1)

  # Create vector of terms in the sequence
  vector_of_terms &amp;lt;- vector_of_x^vector_of_exponents

  # Find the sum
  sum(vector_of_terms)
}
# Test
sum_of_sequence_vectorized(x = 0.3, n = 55)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1.428571&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum_of_sequence_vectorized(x = 6.6, n = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 4243336&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum_of_sequence_vectorized(x = 1, n = 46)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 47&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;geometric-and-harmonic-means-for-loop-and-vectorization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Geometric and Harmonic Means (for loop and vectorization)&lt;/h2&gt;
&lt;p&gt;The geometric mean of a vector is defined as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\left(\prod_{i=1}^{n} x_{i}\right)^{\frac{1}{n}}=\sqrt[n]{x_{1} x_{2} \cdots x_{n}}
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geometric mean (for loop)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;geometric_for_loop &amp;lt;- function(x) {

  # Length of vector
  n &amp;lt;- length(x)

  # Warning
  if (is.numeric(x) == FALSE) {
    rlang::abort(&amp;quot;Vector is of the wrong type; input must be numeric&amp;quot;)
  } else if (n &amp;lt; 2) {
    rlang::abort(&amp;quot;Input vector must contain more than 1 element&amp;quot;)
  }

  # Initialize first term (as.double() ensures no integer overflow)
  x_val &amp;lt;- as.double(x[[1]])
  # Iterate over the sequence 1:(n - 1)
  # The algorithm involves multiplying the current element i by the next (i + 1) element in x
  # Setting (n - 1) as the last item safeguards against out-of-bounds subsetting of &amp;quot;x&amp;quot;
  seq &amp;lt;- 1:(n - 1)
  # Iterate
  for (i in seq) {
    x_val &amp;lt;- x_val * x[[i + 1]]
  }


  # Geometric mean
  (x_val)^(1 / n)
}
# Test
# Create a random vector
x &amp;lt;- sample(x = 1:45, size = 200, replace = TRUE)
# A function from the psych package
psych::geometric.mean(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 19.10415&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Our custom function
geometric_for_loop(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 19.10415&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Geometric mean (vectorization)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;geometric_vectorization &amp;lt;- function(x) {

  # Length of vector
  n &amp;lt;- length(x)

  # Warning
  if (is.numeric(x) == FALSE) {
    rlang::abort(&amp;quot;Vector is of the wrong type; input must be numeric&amp;quot;)
  } else if (n &amp;lt; 2) {
    rlang::abort(&amp;quot;Input vector must contain more than 1 element&amp;quot;)
  }

  # Product of vector elements
  # The function prod() is primitive
  prod &amp;lt;- prod(x)
  # Geometric mean
  prod^(1 / n)
}
# Test
geometric_vectorization(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 19.10415&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Harmonic mean (for loop)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;harmonic_for_loop &amp;lt;- function(x) {

  # Length of vector
  n &amp;lt;- length(x)

  # Warning
  if (is.numeric(x) == FALSE) {
    rlang::abort(&amp;quot;Vector is of the wrong type; input must be numeric&amp;quot;)
  } else if (n &amp;lt; 2) {
    rlang::abort(&amp;quot;Input vector must contain more than 1 element&amp;quot;)
  }

  # Initialize x value
  x_val &amp;lt;- as.double(1 / x[[1]])
  # Create sequence
  seq &amp;lt;- 1:(n - 1)
  # Iterate
  for (i in seq) {
    x_val &amp;lt;- x_val + (1 / x[[i + 1]])
  }

  # Harmonic mean
  n / x_val
}
# Test
# A function from the psych package
psych::harmonic.mean(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 12.33392&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Our custom function
harmonic_for_loop(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 12.33392&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Harmonic mean (vectorization)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;harmonic_vectorization &amp;lt;- function(x) {

  # Length of vector
  n &amp;lt;- length(x)

  # Warning
  if (is.numeric(x) == FALSE) {
    rlang::abort(&amp;quot;Vector is of the wrong type; input must be numeric&amp;quot;)
  } else if (n &amp;lt; 2) {
    rlang::abort(&amp;quot;Input vector must contain more than 1 element&amp;quot;)
  }

  # Find element-wise reciprocals
  x_reciprical &amp;lt;- 1 / x
  # Sum the reciprocals
  sum &amp;lt;- sum(x_reciprical)
  # Harmonic mean
  n / sum
}
# Test
harmonic_vectorization(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 12.33392&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;find-the-sum-of-every-nth-element-of-a-vector&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Find the Sum of Every nth Element of a Vector&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using for loop&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function
every_nth_element_for_loop &amp;lt;- function(x, n) {

  # Define the nth term
  n &amp;lt;- n
  # Initialize sequence
  seq &amp;lt;- seq_along(x)
  # Initialize counter
  counter &amp;lt;- 0
  # Pre-allocate container
  new_x &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = length(x))
  # Loop
  for (i in seq) {

    # Count the term
    counter &amp;lt;- counter + 1

    # If counter gets to n, copy that term to the container
    if (counter == n) {
      new_x[[i]] &amp;lt;- x[[i]]

      # Reinitialize counter to zero
      counter &amp;lt;- 0
    }
  }

  # Sum
  new_x
}
# Test vector
x &amp;lt;- sample(x = 1:203, size = 100, replace = TRUE)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1]  34 190 201 193 127 176  56 134 137  27  36  22  24  96 129  63  50 146
 [19] 119 203  63  34  17   5 147  89  79  49  79  14 198  31 131 146 165  50
 [37] 129  44  64 123  59  37  63  82  86  40  47  59 100  41  31  66 122  82
 [55]  90 203  81  56  43 136  60 179  88  69   4  49 162 111 146  61  58  69
 [73] 127  88 161  31 198  14  77   9  91 158  19 156  19 107  12  67 171  61
 [91] 113  38 129  77 151  36 157 139  45  56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A vector that contains every thirteenth element of a vector
every_nth_element_for_loop(x = x, n = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1]   0   0   0   0   0   0   0   0   0   0   0   0  24   0   0   0   0   0
 [19]   0   0   0   0   0   0   0  89   0   0   0   0   0   0   0   0   0   0
 [37]   0   0  64   0   0   0   0   0   0   0   0   0   0   0   0  66   0   0
 [55]   0   0   0   0   0   0   0   0   0   0   4   0   0   0   0   0   0   0
 [73]   0   0   0   0   0  14   0   0   0   0   0   0   0   0   0   0   0   0
 [91] 113   0   0   0   0   0   0   0   0   0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find sum
sum(every_nth_element_for_loop(x = x, n = 13))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 374&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Using while loop&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function
every_nth_element_while_loop &amp;lt;- function(x, n) {

  # Length of vector
  length &amp;lt;- length(x)
  # Initial value
  value &amp;lt;- 0
  # Initialize counter
  counter &amp;lt;- n
  # Loop
  # Use modulo to ensure that, whenver the counter gets to the nth element, the logical evaluates to true
  while (counter %% n == 0) {

    # Extract the element from x using the index &amp;quot;counter&amp;quot;
    # This counter is every nth element in the vector or the logical above wouldn&amp;#39;t have evaluated to true
    # Alter the value by add the nth term
    value &amp;lt;- value + x[[counter]]

    # Increase the counter by n
    # Now the logical above will again evaluate to true
    counter &amp;lt;- counter + n

    # Exit condition
    if (counter &amp;gt; length) {
      break
    }
  }

  # Sum
  value
}
# Test (This result should corroborate with that of the function above)
every_nth_element_while_loop(x = x, n = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 374&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Using subsetting and &lt;code&gt;seq()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function
every_nth_element_subsetting &amp;lt;- function(x, n) {

  # Define the nth term
  n &amp;lt;- n
  # Create a sequence of indices for subsetting
  seq &amp;lt;- seq.int(from = n, to = length(x), by = n)
  # Sum
  sum(x[seq])
}
# Test
every_nth_element_subsetting(x = x, n = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 374&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;chart-the-flow-of-a-simple-program&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chart the flow of a simple program&lt;/h2&gt;
&lt;p&gt;       Charting the flow of the following program is a good way to see how for loops work in R. We will write out the program line by line so as to understand what it is doing &lt;em&gt;exactly&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 3 # line 1
for (i in 1:3) { # line 2
  show(x) # line 3
  if (x[[i]] %% 2 == 0) { # line 4
    x[[i + 1]] &amp;lt;- x[[i]] / 2 # line 5
  } else { # line 6
    x[[i + 1]] &amp;lt;- 3 * x[[i]] + 1 # line 7
  } # line 8
} # line 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 3
[1]  3 10
[1]  3 10  5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;show(x) # line 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1]  3 10  5 16&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;line 1: Set x equal to 3, which is a double vector of length 1.&lt;/li&gt;
&lt;li&gt;line 2: Set i to 1.&lt;/li&gt;
&lt;li&gt;line 3: Show x to the screen.&lt;/li&gt;
&lt;li&gt;line 4: Take the first element of x and divide by 2; by default, r returns the dividend if the divisor is larger than the dividend (i.e. 2 &amp;gt; 1 and so 1 %% 2 is 1).
Therefore, (x[[i]] %% 2 == 0) evaluates to FALSE. Proceed to line 7.&lt;/li&gt;
&lt;li&gt;line 7: Carry out the sub-assignment by setting the second element of x to 10.&lt;/li&gt;
&lt;li&gt;line 8: End of else action.&lt;/li&gt;
&lt;li&gt;line 9: End of for loop and return to line 2.&lt;/li&gt;
&lt;li&gt;line 2: Set i to 2.&lt;/li&gt;
&lt;li&gt;line 3: Show x, which is now a length-2 vector &lt;span class=&#34;math inline&#34;&gt;\(\langle3,10\rangle\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;line 4: The expression (x[[2]] %% 2 == 0) evaluates to TRUE, since 10 divided by 2 is 5 remainder 0. Proceed to line 5.&lt;/li&gt;
&lt;li&gt;line 5: Sub-assign the third element in x as 5; x[[2]] is 10 and 10 divided by 2 is 5.&lt;/li&gt;
&lt;li&gt;line 6: End of if statement and return to line 2.&lt;/li&gt;
&lt;li&gt;line 2: Set i to 3.&lt;/li&gt;
&lt;li&gt;line 3: Show x, which is now a length-3 vector &lt;span class=&#34;math inline&#34;&gt;\(\langle3,10,5\rangle\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;line 4: (x[[3]] %% 2 == 0) evaluates to FALSE since x[[3]] is 5 and 5 %% 2 is 2 remainder 1. Proceed to line 7&lt;/li&gt;
&lt;li&gt;line 7: Sub-assign the fourth element of x to 16 since &lt;span class=&#34;math inline&#34;&gt;\((3\times5)+ 1=16\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;line 8: End of else action.&lt;/li&gt;
&lt;li&gt;line 9: End of for loop. The sequence is exhausted. Proceed to line 10.&lt;/li&gt;
&lt;li&gt;line 10: Show x, which is now a length-4 vector &lt;span class=&#34;math inline&#34;&gt;\(\langle3,10,5,16\rangle\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;the-lotka-volterra-model-for-a-predator-prey-system&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Lotka-Volterra Model for a predator-prey system&lt;/h2&gt;
&lt;p&gt;       We suppose that &lt;span class=&#34;math inline&#34;&gt;\(x(t)\)&lt;/span&gt; is the number of prey animals at the start of a year &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; (rabbits) and &lt;span class=&#34;math inline&#34;&gt;\(y(t)\)&lt;/span&gt; is the number of predators (foxes), then the Lotka-Volterra model is:
&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
x(t+1) &amp;amp;=x(t)+b_{r} \cdot x(t)-d_{r} \cdot x(t) \cdot y(t) \\
y(t+1) &amp;amp;=y(t)+b_{f} \cdot d_{r} \cdot x(t) \cdot y(t)-d_{f} \cdot y(t)
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where the parameters are defined by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(b_{r}\)&lt;/span&gt; is the natural birth rate of rabbits in the absence of predation;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_{r}\)&lt;/span&gt; is the death rate per encounter of rabbits due to predation;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(d_{f}\)&lt;/span&gt; is the natural death rate of foxes in the absence of food (rabbits);&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(b_{f}\)&lt;/span&gt; is the efficiency of turning predated rabbits into foxes.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Growth rate of rabbits
br &amp;lt;- 0.04
# Death rate of rabbits due to predation
dr &amp;lt;- 0.0005
# Death rate of foxes in the absence of of food
df &amp;lt;- 0.2
# Efficiency of turning predated rabbits into foxes
bf &amp;lt;- 0.1
# Initial predator/prey populations
x &amp;lt;- 4200
y &amp;lt;- 100
# Model output
while (x &amp;gt; 3900) { # line 1
  cat(&amp;quot;x =&amp;quot;, x, &amp;quot; y =&amp;quot;, y, &amp;quot;\n&amp;quot;) # line 2
  x.new &amp;lt;- (1 + br) * x - dr * x * y # line 3
  y.new &amp;lt;- (1 - df) * y + bf * dr * x * y # line 4
  x &amp;lt;- x.new # line 5
  y &amp;lt;- y.new # line 6
} # line 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;x = 4200  y = 100 
x = 4158  y = 101 
x = 4114.341  y = 101.7979 
x = 4069.499  y = 102.3799 
x = 4023.962  y = 102.7356 
x = 3978.218  y = 102.8587 
x = 3932.749  y = 102.7467 &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;line 1: The initial population of rabbits is &lt;span class=&#34;math inline&#34;&gt;\(x = 4000\)&lt;/span&gt;. Therefore &lt;span class=&#34;math inline&#34;&gt;\((x &amp;gt; 3900)\)&lt;/span&gt; evaluates to TRUE. Proceed to line 2.&lt;/li&gt;
&lt;li&gt;line 2: Concatenate and print the populations of predator and prey at state one. The “dash n” in &lt;code&gt;cat&lt;/code&gt; means start a new line, ensuring that the printed output are printed lines by line successively instead of just one line.&lt;/li&gt;
&lt;li&gt;line 3: Compute the new population of rabbits and bind that object value to the name x.new.&lt;/li&gt;
&lt;li&gt;line 4: Compute the new population foxes and bind that object value to the name y.new.&lt;/li&gt;
&lt;li&gt;line 5: Bind x.new to x.&lt;/li&gt;
&lt;li&gt;line 6: Bind y.new to y.&lt;/li&gt;
&lt;li&gt;line 7: End of while loop. Return to line 1.&lt;/li&gt;
&lt;li&gt;line 1: If (x &amp;gt; 3900) still evaluates to TRUE, repeat as above for state two, three, and so on. If not, end of program.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;find-the-minimum-of-a-vector&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Find the Minimum of a Vector&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;find_min_max &amp;lt;- function(x, summary_stat) {

  # Find minimum or maximum
  if (summary_stat == &amp;quot;min&amp;quot;) {

    # Initialize minimum value
    x_min &amp;lt;- x[[1]]
    # Loop
    for (i in 2:length(x)) {
      if (x_min &amp;gt; x[[i]]) {
        x_min &amp;lt;- x[[i]]
      }
    }
    # Output
    x_min
  } else if (summary_stat == &amp;quot;max&amp;quot;) {

    # Initialize minimum value
    x_max &amp;lt;- x[[1]]
    # Loop
    for (i in 2:length(x)) {
      if (x_max &amp;lt; x[[i]]) {
        x_max &amp;lt;- x[[i]]
      }
    }
    # Output
    x_max
  } else {

    # Warning
    rlang::abort(message = &amp;quot;summary_stat must either be min or max&amp;quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;       The function above uses if statements and for loops; there may be a need to benchmark performance. However, we are not creating copies each time we create a binding from the name “x_min” to a new vector object. This is because the new vector object only has a single name bound to it, and so R applies the modify-in-place optimization.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Test vector
x &amp;lt;- sample(x = 20:1923, size = 1000, replace = FALSE)
# Find min and max
find_min_max(x, summary_stat = &amp;quot;min&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 29&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;find_min_max(x, summary_stat = &amp;quot;max&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1918&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Confirm using base R functions
min(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 29&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1918&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;       That is it for control flows in R! Hopefully, this was helpful.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
