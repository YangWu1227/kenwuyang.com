<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Finance | Yang (Ken) Wu</title>
    <link>YangWu1227.github.io/tag/finance/</link>
      <atom:link href="YangWu1227.github.io/tag/finance/index.xml" rel="self" type="application/rss+xml" />
    <description>Finance</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2021 Yang Wu</copyright><lastBuildDate>Sun, 20 Jun 2021 21:13:14 -0500</lastBuildDate>
    <image>
      <url>/YangWu1227.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Finance</title>
      <link>YangWu1227.github.io/tag/finance/</link>
    </image>
    
    <item>
      <title>Portfolio Optimization Dashboard</title>
      <link>YangWu1227.github.io/post/portfolio-optimization-continued/</link>
      <pubDate>Sun, 20 Jun 2021 21:13:14 -0500</pubDate>
      <guid>YangWu1227.github.io/post/portfolio-optimization-continued/</guid>
      <description>
&lt;script src=&#34;YangWu1227.github.io/post/portfolio-optimization-continued/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In the previous post, we created a customizable portfolio dashboard using shiny. We could also create a portfolio optimization dashboard; take a look a the following &lt;a href=&#34;https://rpubs.com/yangwu1227/personal_project&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customizable Portfolio Dashboard</title>
      <link>YangWu1227.github.io/post/customizable-portfolio-dashboard/</link>
      <pubDate>Thu, 17 Jun 2021 21:13:14 -0500</pubDate>
      <guid>YangWu1227.github.io/post/customizable-portfolio-dashboard/</guid>
      <description>
&lt;script src=&#34;YangWu1227.github.io/post/customizable-portfolio-dashboard/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;For a better experience, please see this &lt;a href=&#34;https://kenyangwu1227.shinyapps.io/Yang-Wu-Customizable-Portfolio-Dashboard/&#34;&gt;application&lt;/a&gt; on the shiny server.&lt;/p&gt;
&lt;iframe height=&#34;1000&#34; width=&#34;100%&#34; frameborder=&#34;no&#34; src=&#34; https://kenyangwu1227.shinyapps.io/Yang-Wu-Customizable-Portfolio-Dashboard/&#34;&gt;
&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Asset Returns</title>
      <link>YangWu1227.github.io/post/visualization-asset-returns/</link>
      <pubDate>Sat, 01 May 2021 21:13:14 -0500</pubDate>
      <guid>YangWu1227.github.io/post/visualization-asset-returns/</guid>
      <description>
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/proj4js/proj4.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/css/motion.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/highcharts.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/highcharts-3d.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/highcharts-more.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/stock.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/map.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/annotations.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/data.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/drilldown.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/item-series.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/offline-exporting.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/overlapping-datalabels.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/exporting.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/export-data.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/funnel.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/heatmap.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/treemap.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/sankey.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/dependency-wheel.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/organization.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/solid-gauge.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/streamgraph.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/sunburst.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/vector.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/wordcloud.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/xrange.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/tilemap.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/venn.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/gantt.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/timeline.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/parallel-coordinates.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/bullet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/coloraxis.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/dumbbell.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/lollipop.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/series-label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/plugins/motion.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/custom/reset.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highcharts/modules/boost.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/highchart-binding/highchart.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;visualization-asset-returns-in-xts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization Asset returns in xts&lt;/h2&gt;
&lt;p&gt;In this post, we will explore some visualizations of asset returns. Similar to the previous post, we import our data from Yahoo Finance. The five assets under examination are Exchange Traded Funds, which are funds that can be traded on an exchange like a stock. Exchange-traded funds are a type of investment fund that offers the best attributes of two popular assets: they have the diversification benefits of mutual funds and the ease with which stocks are traded.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a vector of ticker symbols
symbols &amp;lt;- c(&amp;quot;SPY&amp;quot;, &amp;quot;EFA&amp;quot;, &amp;quot;DIA&amp;quot;, &amp;quot;QQQ&amp;quot;, &amp;quot;AGG&amp;quot;)
# Load data from 2012 to today
prices &amp;lt;- quantmod::getSymbols(
  Symbols = symbols,
  src = &amp;quot;yahoo&amp;quot;,
  from = &amp;quot;2012-12-31&amp;quot;,
  to = &amp;quot;2021-7-31&amp;quot;,
  auto.assign = TRUE,
  warnings = FALSE
) %&amp;gt;%
  # The map function takes an anonymous function and will return a list of five
  # The Ad() function extracts the adjusted price series for each ETF
  purrr::map(.f = ~ quantmod::Ad(get(x = .x))) %&amp;gt;%
  # Use reduce() to merge the elements of .x consecutively
  purrr::reduce(.f = merge) %&amp;gt;%
  # Use a replacement function to set column names as ticker symbols
  # This function is in prefix form
  # It is equivalent to colnames(x = prices) &amp;lt;- value
  `colnames&amp;lt;-`(value = symbols)
# Remove all objects but price series and ticker symbol vector
rm(list = setdiff(x = ls(), y = c(&amp;quot;prices&amp;quot;, &amp;quot;symbols&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Since we will not be aggregating asset returns to compute portfolio returns, we choose log returns, i.e., the continuously compounded rate of returns, over the simple returns. Continuously compounded rate of returns should be used in statistical analysis (and visualizations) because unlike simple returns they are not positively biased. In addition, we opt to convert daily prices to monthly returns by finding the relative change of prices between the last day of each month. We could have easily chosen to use the first day of each month, and the values of the monthly returns will be different.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Keep only the last price reading of each month
asset_returns_xts &amp;lt;- xts::to.monthly(
  x = prices,
  drop.time = TRUE,
  indexAt = &amp;quot;lastof&amp;quot;,
  OHLC = FALSE
) %&amp;gt;%
  # Compute log returns
  PerformanceAnalytics::Return.calculate(method = &amp;quot;log&amp;quot;) %&amp;gt;%
  # Drop the first row since we lose one observation in 12/31/2012
  stats::na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;monthly-log-returns-highcharts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly log returns highcharts&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;highcharter&lt;/code&gt; package &lt;a href=&#34;https://cran.r-project.org/web/packages/highcharter/highcharter.pdf&#34;&gt;vignette&lt;/a&gt; is a wrapper for the âHighchartsâ Library, which has an amazing visualization infrastructure for time series and financial data. The &lt;code&gt;highcharter&lt;/code&gt; package houses functions that accept xts objects (Râs time series object class) as arguments, making it seamless to move from time series data to visualizations. The plot below displays the line chart for a subset of the ETFâs. We could have easily plotted all five ETFâs on the same line chart, but it would be harder for our eyes to compare, contrast, and identify patterns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Crate Highstock widget
highchart(type = &amp;quot;stock&amp;quot;) %&amp;gt;%
  # Add chart main title
  hc_title(text = &amp;quot;Monthly Log Returns for SPY, QQQ, DIA&amp;quot;) %&amp;gt;%
  # Add returns series to highchart objects
  # We use &amp;quot;symbols&amp;quot; to reference series since we may need to add/remove ETF&amp;#39;s in the future
  # Use matrix sub-setting and character indexing to select returns by column
  hc_add_series(
    data = asset_returns_xts[, symbols[[1]]],
    name = symbols[[1]]
  ) %&amp;gt;%
  hc_add_series(
    data = asset_returns_xts[, symbols[[4]]],
    name = symbols[[4]]
  ) %&amp;gt;%
  hc_add_series(
    data = asset_returns_xts[, symbols[[3]]],
    name = symbols[[3]]
  ) %&amp;gt;%
  # Add theme to highchart object
  # More thems to be found in the vignette
  hc_add_theme(hc_thm = hc_theme_darkunica()) %&amp;gt;%
  # Navigator
  hc_navigator(enabled = TRUE) %&amp;gt;%
  # Scrollbar
  hc_scrollbar(enabled = TRUE) %&amp;gt;%
  # Exporting
  hc_exporting(enabled = TRUE) %&amp;gt;%
  # Add legend
  hc_legend(enabled = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;highchart html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;hc_opts&#34;:{&#34;chart&#34;:{&#34;reflow&#34;:true},&#34;title&#34;:{&#34;text&#34;:&#34;Monthly Log Returns for SPY, QQQ, DIA&#34;},&#34;yAxis&#34;:{&#34;title&#34;:{&#34;text&#34;:null}},&#34;credits&#34;:{&#34;enabled&#34;:false},&#34;exporting&#34;:{&#34;enabled&#34;:true},&#34;boost&#34;:{&#34;enabled&#34;:false},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;label&#34;:{&#34;enabled&#34;:false},&#34;turboThreshold&#34;:0},&#34;treemap&#34;:{&#34;layoutAlgorithm&#34;:&#34;squarified&#34;}},&#34;series&#34;:[{&#34;data&#34;:[[1359590400000,0.0499233466432898],[1362009600000,0.0126775104319128],[1364688000000,0.0372685734336766],[1367280000000,0.0190299062497603],[1369958400000,0.0233353228660746],[1372550400000,-0.0134341694332187],[1375228800000,0.0503862865179743],[1377907200000,-0.0304517976812679],[1380499200000,0.0311561408779237],[1383177600000,0.0452665117871476],[1385769600000,0.0292070051871898],[1388448000000,0.0255960942383329],[1391126400000,-0.0358845614392527],[1393545600000,0.0445103712169796],[1396224000000,0.00826119350359722],[1398816000000,0.00692758585894637],[1401494400000,0.0229410515663675],[1404086400000,0.02043474771975],[1406764800000,-0.0135286635627399],[1409443200000,0.038704692485843],[1412035200000,-0.0138921272524977],[1414713600000,0.023277637904787],[1417305600000,0.0271014700700949],[1419984000000,-0.00253977623295665],[1422662400000,-0.0300771387632395],[1425081600000,0.0546819228454059],[1427760000000,-0.0158302454985746],[1430352000000,0.00978572442222436],[1433030400000,0.0127741780656789],[1435622400000,-0.0205212211005801],[1438300800000,0.0223380683706793],[1440979200000,-0.0628867276215219],[1443571200000,-0.0258471796090438],[1446249600000,0.0816351274884557],[1448841600000,0.00364844721425062],[1451520000000,-0.0174337008486649],[1454198400000,-0.0510687267890155],[1456704000000,-0.000826243349865585],[1459382400000,0.0651003872753586],[1461974400000,0.00393321982231765],[1464652800000,0.0168685320630537],[1467244800000,0.00346980909663497],[1469923200000,0.035822119477972],[1472601600000,0.0011967404237998],[1475193600000,5.79940593956607e-05],[1477872000000,-0.0174890256661397],[1480464000000,0.0361761148260431],[1483142400000,0.0200687973570872],[1485820800000,0.0177365706792747],[1488240000000,0.0385394241704402],[1490918400000,0.0012490899621298],[1493510400000,0.00987730260218278],[1496188800000,0.0140141552053921],[1498780800000,0.00635464467355096],[1501459200000,0.0203459256045182],[1504137600000,0.00291339092918719],[1506729600000,0.0199490672185201],[1509408000000,0.0232907732050771],[1512000000000,0.0301080477801552],[1514678400000,0.012054988607086],[1517356800000,0.054828191042982],[1519776000000,-0.0370378632932287],[1522454400000,-0.0277931559276139],[1525046400000,0.00515480445635852],[1527724800000,0.0240184874649945],[1530316800000,0.00573429309994733],[1532995200000,0.0363767236187185],[1535673600000,0.0314210679966198],[1538265600000,0.00592785780421767],[1540944000000,-0.0716080395150334],[1543536000000,0.018379340633337],[1546214400000,-0.092168374661469],[1548892800000,0.0770218572860824],[1551312000000,0.0319011120674153],[1553990400000,0.0179388847032236],[1556582400000,0.0400400732620989],[1559260800000,-0.0658952581667807],[1561852800000,0.0672719538458582],[1564531200000,0.0150064584504026],[1567209600000,-0.0168854274267698],[1569801600000,0.0192710562117329],[1572480000000,0.0218641095606467],[1575072000000,0.0355583330012728],[1577750400000,0.0286413077692318],[1580428800000,-0.000403740527964658],[1582934400000,-0.0824752160150535],[1585612800000,-0.133384333854893],[1588204800000,0.119544622149029],[1590883200000,0.0465450833321528],[1593475200000,0.0175789950021947],[1596153600000,0.0572231052200518],[1598832000000,0.0674686788709353],[1601424000000,-0.0381626517371307],[1604102400000,-0.0252496234845445],[1606694400000,0.103257531772769],[1609372800000,0.0363784716358726],[1612051200000,-0.0102426519497101],[1614470400000,0.027425910353716],[1617148800000,0.0443989173287811],[1619740800000,0.0515581721899112],[1622419200000,0.00654459063278168],[1625011200000,0.02217965999602],[1627689600000,0.0241192713736327]],&#34;name&#34;:&#34;SPY&#34;},{&#34;data&#34;:[[1359590400000,0.026365119649868],[1362009600000,0.00343342967656302],[1364688000000,0.0297991850145607],[1367280000000,0.0250567768792225],[1369958400000,0.0351496956299195],[1372550400000,-0.0242435272755586],[1375228800000,0.0612265550431381],[1377907200000,-0.00396696807842911],[1380499200000,0.0471908115392212],[1383177600000,0.048379324152843],[1385769600000,0.034895349159938],[1388448000000,0.028851173101784],[1391126400000,-0.019400525022073],[1393545600000,0.0502407225884154],[1396224000000,-0.027715952557239],[1398816000000,-0.00319923466269501],[1401494400000,0.0438796089742466],[1404086400000,0.030760232126525],[1406764800000,0.011750283013181],[1409443200000,0.0488804761960155],[1412035200000,-0.00759521402334862],[1414713600000,0.0260768340076156],[1417305600000,0.0444603015370468],[1419984000000,-0.0226610157753457],[1422662400000,-0.0210432755985925],[1425081600000,0.0697180993287629],[1427760000000,-0.0238725878348109],[1430352000000,0.0190410272070922],[1433030400000,0.0222354780493283],[1435622400000,-0.0251546071667388],[1438300800000,0.0445694250814173],[1440979200000,-0.0706850139818105],[1443571200000,-0.0223202542022127],[1446249600000,0.10768691966144],[1448841600000,0.00606980891714759],[1451520000000,-0.0160761629281296],[1454198400000,-0.0716080447879532],[1456704000000,-0.0157773363837386],[1459382400000,0.066280126593913],[1461974400000,-0.0323869145437534],[1464652800000,0.0427721872183593],[1467244800000,-0.0230434267351844],[1469923200000,0.0690673683570937],[1472601600000,0.0104459256321308],[1475193600000,0.0218939429791343],[1477872000000,-0.0146793590603638],[1480464000000,0.00434980702234711],[1483142400000,0.0112587525412797],[1485820800000,0.050123627991554],[1488240000000,0.0428204490541644],[1490918400000,0.0200665733045957],[1493510400000,0.0269042792230421],[1496188800000,0.0382333358215758],[1498780800000,-0.0234523596099621],[1501459200000,0.0398099822320912],[1504137600000,0.020523899825962],[1506729600000,-0.00295692200337072],[1509408000000,0.0450346003607187],[1512000000000,0.0195255956640272],[1514678400000,0.0060132375308406],[1517356800000,0.083946249728057],[1519776000000,-0.013012137421871],[1522454400000,-0.0416435836788489],[1525046400000,0.00504554074309915],[1527724800000,0.0551783942394168],[1530316800000,0.0113855542443497],[1532995200000,0.0275799625290842],[1535673600000,0.0561977855738025],[1538265600000,-0.00282042223997703],[1540944000000,-0.089877785733858],[1543536000000,-0.0026533402629747],[1546214400000,-0.0905893403391795],[1548892800000,0.0862765077844578],[1551312000000,0.0294733023227982],[1553990400000,0.0384951350458493],[1556582400000,0.0535339364077432],[1559260800000,-0.0858321909909261],[1561852800000,0.0731578584772237],[1564531200000,0.0230797528494735],[1567209600000,-0.019178147210952],[1569801600000,0.00913694834698919],[1572480000000,0.0428685183131261],[1575072000000,0.0398879019583713],[1577750400000,0.0381274970012333],[1580428800000,0.0299319088308145],[1582934400000,-0.062486489871926],[1585612800000,-0.0756489326968417],[1588204800000,0.13953355577893],[1590883200000,0.0639216688038049],[1593475200000,0.0609696926231438],[1596153600000,0.0708920413090075],[1598832000000,0.103861841467478],[1601424000000,-0.0595229290872696],[1604102400000,-0.030922446407831],[1606694400000,0.106391855655347],[1609372800000,0.0478605782810515],[1612051200000,0.00261023959950091],[1614470400000,-0.00133606127254815],[1617148800000,0.0170220548588684],[1619740800000,0.0574177254240089],[1622419200000,-0.0120849253861897],[1625011200000,0.0607387801063579],[1627689600000,0.0282077505959411]],&#34;name&#34;:&#34;QQQ&#34;},{&#34;data&#34;:[[1359590400000,0.0593020144118155],[1362009600000,0.0159761628967265],[1364688000000,0.0373773879702428],[1367280000000,0.0193813592420788],[1369958400000,0.0234121277379344],[1372550400000,-0.0149581045319929],[1375228800000,0.0427979352531489],[1377907200000,-0.0436563580304021],[1380499200000,0.0230277245038302],[1383177600000,0.0291232396505636],[1385769600000,0.0362483566435818],[1388448000000,0.0315694230905335],[1391126400000,-0.0533264798456399],[1393545600000,0.0419212652686696],[1396224000000,0.00918433596772328],[1398816000000,0.00814472962342272],[1401494400000,0.0114681347251455],[1404086400000,0.00766352041195262],[1406764800000,-0.0145336830649576],[1409443200000,0.0350332175302839],[1412035200000,-0.00235583309182186],[1414713600000,0.0196793525684456],[1417305600000,0.0289863556806216],[1419984000000,0.000920410608618916],[1422662400000,-0.0359615253945123],[1425081600000,0.0579785165589417],[1427760000000,-0.0183919432762538],[1430352000000,0.0040249896011515],[1433030400000,0.012983990618145],[1435622400000,-0.0214558971529106],[1438300800000,0.00582914664968293],[1440979200000,-0.0640680098124342],[1443571200000,-0.0136517966982375],[1446249600000,0.0823153856425254],[1448841600000,0.00741459248549159],[1451520000000,-0.0161176723823768],[1454198400000,-0.0563521373178206],[1456704000000,0.00731637032720123],[1459382400000,0.0705564668873011],[1461974400000,0.00609028613147533],[1464652800000,0.00384685636560711],[1467244800000,0.0095733442677215],[1469923200000,0.0289862252010691],[1472601600000,0.00249446288963551],[1475193600000,-0.00438234428346096],[1477872000000,-0.00785557482060728],[1480464000000,0.0577492427576631],[1483142400000,0.0336007206655244],[1485820800000,0.0052731531558381],[1488240000000,0.0500790157395397],[1490918400000,-0.00596652151414467],[1493510400000,0.0140766202370273],[1496188800000,0.00733317246749987],[1498780800000,0.0171558040737612],[1501459200000,0.0263750206701294],[1504137600000,0.00617410473432667],[1506729600000,0.0214610282995178],[1509408000000,0.0436869679990046],[1512000000000,0.0410591136999905],[1514678400000,0.020809977605464],[1517356800000,0.0558330968052028],[1519776000000,-0.0413867418012952],[1522454400000,-0.0339800593347315],[1525046400000,0.00111506100730541],[1527724800000,0.0136878161753096],[1530316800000,-0.00446245903779996],[1532995200000,0.0473224917924275],[1535673600000,0.0242054620553009],[1538265600000,0.0194050783172699],[1540944000000,-0.0506421988417722],[1543536000000,0.0194281964485645],[1546214400000,-0.0886701197244362],[1548892800000,0.0707582061360101],[1551312000000,0.0387071558586847],[1553990400000,0.00153938795859965],[1556582400000,0.0259747815675286],[1559260800000,-0.0659033366876596],[1561852800000,0.0709957286320906],[1564531200000,0.0108123852519935],[1567209600000,-0.0138513598831489],[1569801600000,0.0213253120496422],[1572480000000,0.00545815736373356],[1575072000000,0.0398275543570268],[1577750400000,0.0177125809338685],[1580428800000,-0.0089737603030402],[1582934400000,-0.101108776547094],[1585612800000,-0.146420227251152],[1588204800000,0.104397770485524],[1590883200000,0.0464620252410217],[1593475200000,0.0168646471799452],[1596153600000,0.0256075065638566],[1598832000000,0.0748616515827694],[1601424000000,-0.0217501084050404],[1604102400000,-0.0454541455113651],[1606694400000,0.114705910836436],[1609372800000,0.03238603198756],[1612051200000,-0.0193368803425464],[1614470400000,0.0335540729995829],[1617148800000,0.0668807675976479],[1619740800000,0.0265141437006795],[1622419200000,0.0216352883924493],[1625011200000,-0.000541428981630787],[1627689600000,0.0136385341289351]],&#34;name&#34;:&#34;DIA&#34;}],&#34;navigator&#34;:{&#34;enabled&#34;:true},&#34;scrollbar&#34;:{&#34;enabled&#34;:true},&#34;legend&#34;:{&#34;enabled&#34;:true}},&#34;theme&#34;:{&#34;colors&#34;:[&#34;#2b908f&#34;,&#34;#90ee7e&#34;,&#34;#f45b5b&#34;,&#34;#7798BF&#34;,&#34;#aaeeee&#34;,&#34;#ff0066&#34;,&#34;#eeaaee&#34;,&#34;#55BF3B&#34;],&#34;chart&#34;:{&#34;backgroundColor&#34;:{&#34;linearGradient&#34;:{&#34;x1&#34;:0,&#34;y1&#34;:0,&#34;x2&#34;:1,&#34;y2&#34;:1},&#34;stops&#34;:[[0,&#34;#2a2a2b&#34;],[1,&#34;#3e3e40&#34;]]},&#34;style&#34;:{&#34;fontFamily&#34;:&#34;Unica One, sans-serif&#34;},&#34;plotBorderColor&#34;:&#34;#606063&#34;},&#34;title&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#E0E0E3&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;,&#34;fontSize&#34;:&#34;20px&#34;}},&#34;subtitle&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#E0E0E3&#34;,&#34;textTransform&#34;:&#34;uppercase&#34;}},&#34;xAxis&#34;:{&#34;gridLineColor&#34;:&#34;#707073&#34;,&#34;labels&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#E0E0E3&#34;}},&#34;lineColor&#34;:&#34;#707073&#34;,&#34;minorGridLineColor&#34;:&#34;#505053&#34;,&#34;tickColor&#34;:&#34;#707073&#34;,&#34;title&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#A0A0A3&#34;}}},&#34;yAxis&#34;:{&#34;gridLineColor&#34;:&#34;#707073&#34;,&#34;labels&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#E0E0E3&#34;}},&#34;lineColor&#34;:&#34;#707073&#34;,&#34;minorGridLineColor&#34;:&#34;#505053&#34;,&#34;tickColor&#34;:&#34;#707073&#34;,&#34;tickWidth&#34;:1,&#34;title&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#A0A0A3&#34;}}},&#34;tooltip&#34;:{&#34;backgroundColor&#34;:&#34;rgba(0, 0, 0, 0.85)&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#F0F0F0&#34;}},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;dataLabels&#34;:{&#34;color&#34;:&#34;#B0B0B3&#34;},&#34;marker&#34;:{&#34;lineColor&#34;:&#34;#333&#34;}},&#34;boxplot&#34;:{&#34;fillColor&#34;:&#34;#505053&#34;},&#34;candlestick&#34;:{&#34;lineColor&#34;:&#34;white&#34;},&#34;errorbar&#34;:{&#34;color&#34;:&#34;white&#34;}},&#34;legend&#34;:{&#34;itemStyle&#34;:{&#34;color&#34;:&#34;#E0E0E3&#34;},&#34;itemHoverStyle&#34;:{&#34;color&#34;:&#34;#FFF&#34;},&#34;itemHiddenStyle&#34;:{&#34;color&#34;:&#34;#606063&#34;}},&#34;credits&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#666&#34;}},&#34;labels&#34;:{&#34;style&#34;:{&#34;color&#34;:&#34;#707073&#34;}},&#34;drilldown&#34;:{&#34;activeAxisLabelStyle&#34;:{&#34;color&#34;:&#34;#F0F0F3&#34;},&#34;activeDataLabelStyle&#34;:{&#34;color&#34;:&#34;#F0F0F3&#34;}},&#34;navigation&#34;:{&#34;buttonOptions&#34;:{&#34;symbolStroke&#34;:&#34;#DDDDDD&#34;,&#34;theme&#34;:{&#34;fill&#34;:&#34;#505053&#34;}}},&#34;rangeSelector&#34;:{&#34;buttonTheme&#34;:{&#34;fill&#34;:&#34;#505053&#34;,&#34;stroke&#34;:&#34;#000000&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;#CCC&#34;},&#34;states&#34;:{&#34;hover&#34;:{&#34;fill&#34;:&#34;#707073&#34;,&#34;stroke&#34;:&#34;#000000&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;white&#34;}},&#34;select&#34;:{&#34;fill&#34;:&#34;#000003&#34;,&#34;stroke&#34;:&#34;#000000&#34;,&#34;style&#34;:{&#34;color&#34;:&#34;white&#34;}}}},&#34;inputBoxBorderColor&#34;:&#34;#505053&#34;,&#34;inputStyle&#34;:{&#34;backgroundColor&#34;:&#34;#333&#34;,&#34;color&#34;:&#34;silver&#34;},&#34;labelStyle&#34;:{&#34;color&#34;:&#34;silver&#34;}},&#34;navigator&#34;:{&#34;handles&#34;:{&#34;backgroundColor&#34;:&#34;#666&#34;,&#34;borderColor&#34;:&#34;#AAA&#34;},&#34;outlineColor&#34;:&#34;#CCC&#34;,&#34;maskFill&#34;:&#34;rgba(255,255,255,0.1)&#34;,&#34;series&#34;:{&#34;color&#34;:&#34;#7798BF&#34;,&#34;lineColor&#34;:&#34;#A6C7ED&#34;},&#34;xAxis&#34;:{&#34;gridLineColor&#34;:&#34;#505053&#34;}},&#34;scrollbar&#34;:{&#34;barBackgroundColor&#34;:&#34;#808083&#34;,&#34;barBorderColor&#34;:&#34;#808083&#34;,&#34;buttonArrowColor&#34;:&#34;#CCC&#34;,&#34;buttonBackgroundColor&#34;:&#34;#606063&#34;,&#34;buttonBorderColor&#34;:&#34;#606063&#34;,&#34;rifleColor&#34;:&#34;#FFF&#34;,&#34;trackBackgroundColor&#34;:&#34;#404043&#34;,&#34;trackBorderColor&#34;:&#34;#404043&#34;},&#34;legendBackgroundColor&#34;:&#34;rgba(0, 0, 0, 0.5)&#34;,&#34;background2&#34;:&#34;#505053&#34;,&#34;dataLabelsColor&#34;:&#34;#B0B0B3&#34;,&#34;textColor&#34;:&#34;#C0C0C0&#34;,&#34;contrastTextColor&#34;:&#34;#F0F0F3&#34;,&#34;maskColor&#34;:&#34;rgba(255,255,255,0.3)&#34;},&#34;conf_opts&#34;:{&#34;global&#34;:{&#34;Date&#34;:null,&#34;VMLRadialGradientURL&#34;:&#34;http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png&#34;,&#34;canvasToolsURL&#34;:&#34;http =//code.highcharts.com/list(version)/modules/canvas-tools.js&#34;,&#34;getTimezoneOffset&#34;:null,&#34;timezoneOffset&#34;:0,&#34;useUTC&#34;:true},&#34;lang&#34;:{&#34;contextButtonTitle&#34;:&#34;Chart context menu&#34;,&#34;decimalPoint&#34;:&#34;.&#34;,&#34;downloadJPEG&#34;:&#34;Download JPEG image&#34;,&#34;downloadPDF&#34;:&#34;Download PDF document&#34;,&#34;downloadPNG&#34;:&#34;Download PNG image&#34;,&#34;downloadSVG&#34;:&#34;Download SVG vector image&#34;,&#34;drillUpText&#34;:&#34;Back to {series.name}&#34;,&#34;invalidDate&#34;:null,&#34;loading&#34;:&#34;Loading...&#34;,&#34;months&#34;:[&#34;January&#34;,&#34;February&#34;,&#34;March&#34;,&#34;April&#34;,&#34;May&#34;,&#34;June&#34;,&#34;July&#34;,&#34;August&#34;,&#34;September&#34;,&#34;October&#34;,&#34;November&#34;,&#34;December&#34;],&#34;noData&#34;:&#34;No data to display&#34;,&#34;numericSymbols&#34;:[&#34;k&#34;,&#34;M&#34;,&#34;G&#34;,&#34;T&#34;,&#34;P&#34;,&#34;E&#34;],&#34;printChart&#34;:&#34;Print chart&#34;,&#34;resetZoom&#34;:&#34;Reset zoom&#34;,&#34;resetZoomTitle&#34;:&#34;Reset zoom level 1:1&#34;,&#34;shortMonths&#34;:[&#34;Jan&#34;,&#34;Feb&#34;,&#34;Mar&#34;,&#34;Apr&#34;,&#34;May&#34;,&#34;Jun&#34;,&#34;Jul&#34;,&#34;Aug&#34;,&#34;Sep&#34;,&#34;Oct&#34;,&#34;Nov&#34;,&#34;Dec&#34;],&#34;thousandsSep&#34;:&#34; &#34;,&#34;weekdays&#34;:[&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34;]}},&#34;type&#34;:&#34;stock&#34;,&#34;fonts&#34;:&#34;Unica+One&#34;,&#34;debug&#34;:false},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The navigator is a small series below the main series, displaying a view of the entire data set. It provides tools to zoom in and out on parts of the data as well as panning across the dataset&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scrollbar is a means of panning over the X axis of a stock chart. Scrollbars can also be applied to other types of axes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-log-returns-histograms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly log returns Histograms&lt;/h3&gt;
&lt;p&gt;Create a function that returns a univariate histogram given a series of returns. The function will also take several other argumentsâ an xts object of returns, a vector of ticker symbols, a symbol index, and a color for plotting. Internally, the function creates a list of histogram components: counts, density, bin breaks, etc. Then, the function &lt;code&gt;hchart()&lt;/code&gt; is called on the histogram list object to plot the univariate histogram; this is the final output of the function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hc_hist_fun &amp;lt;- function(xts_obj, tickers, symbol_index, color) {

  # Check for invalid input
  if (!is.xts(xts_obj) || !rlang::is_character(color) || !rlang::is_character(tickers)) {
    rlang::abort(
      message = &amp;quot;Invalid input type for xts_object, tickers, and/or color arguments&amp;quot;
    )
  }

  # Create histogram list object with 6 elements
  hc_hist &amp;lt;- graphics::hist(xts_obj[, tickers[[symbol_index]]],
    breaks = &amp;quot;Freedman-Diaconis&amp;quot;,
    plot = FALSE
  )

  # Call hchart on the histogram list object
  hchart(object = hc_hist, color = color) %&amp;gt;%
    hc_title(
      text =
        paste(tickers[[symbol_index]], &amp;quot;Log Returns Distribution&amp;quot;, sep = &amp;quot; &amp;quot;)
    ) %&amp;gt;%
    hc_add_theme(hc_thm = hc_theme_flat()) %&amp;gt;%
    hc_exporting(enabled = TRUE) %&amp;gt;%
    hc_legend(enabled = FALSE)
}&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Now, we utilize the functional programming tool from &lt;code&gt;purrr&lt;/code&gt; to interactively apply the function above to each of the univariate returns series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Map the histogram functionto each of the returns series
list_of_histogram &amp;lt;- purrr::map(
  .x = 1:5,
  .f = ~ hc_hist_fun(
    xts_obj = asset_returns_xts,
    tickers = symbols,
    symbol_index = .x,
    color = &amp;quot;cornflowerblue&amp;quot;
  )
)
list_of_histogram[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;highchart html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;hc_opts&#34;:{&#34;chart&#34;:{&#34;reflow&#34;:true,&#34;zoomType&#34;:&#34;x&#34;},&#34;title&#34;:{&#34;text&#34;:&#34;SPY Log Returns Distribution&#34;},&#34;yAxis&#34;:{&#34;title&#34;:{&#34;text&#34;:null}},&#34;credits&#34;:{&#34;enabled&#34;:false},&#34;exporting&#34;:{&#34;enabled&#34;:true},&#34;boost&#34;:{&#34;enabled&#34;:false},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;label&#34;:{&#34;enabled&#34;:false},&#34;turboThreshold&#34;:0},&#34;treemap&#34;:{&#34;layoutAlgorithm&#34;:&#34;squarified&#34;}},&#34;tooltip&#34;:{&#34;formatter&#34;:&#34;function() { return  this.point.name + &#39;&lt;br/&gt;&#39; + this.y; }&#34;},&#34;series&#34;:[{&#34;data&#34;:[{&#34;x&#34;:-0.13,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.14, -0.12]&#34;},{&#34;x&#34;:-0.11,&#34;y&#34;:0,&#34;name&#34;:&#34;(-0.12, -0.1]&#34;},{&#34;x&#34;:-0.09,&#34;y&#34;:2,&#34;name&#34;:&#34;(-0.1, -0.08]&#34;},{&#34;x&#34;:-0.07,&#34;y&#34;:3,&#34;name&#34;:&#34;(-0.08, -0.06]&#34;},{&#34;x&#34;:-0.05,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.06, -0.04]&#34;},{&#34;x&#34;:-0.03,&#34;y&#34;:9,&#34;name&#34;:&#34;(-0.04, -0.02]&#34;},{&#34;x&#34;:-0.01,&#34;y&#34;:11,&#34;name&#34;:&#34;(-0.02, -6.93889390390723e-18]&#34;},{&#34;x&#34;:0.01,&#34;y&#34;:29,&#34;name&#34;:&#34;(-6.93889390390723e-18, 0.02]&#34;},{&#34;x&#34;:0.03,&#34;y&#34;:29,&#34;name&#34;:&#34;(0.02, 0.04]&#34;},{&#34;x&#34;:0.05,&#34;y&#34;:11,&#34;name&#34;:&#34;(0.04, 0.06]&#34;},{&#34;x&#34;:0.07,&#34;y&#34;:4,&#34;name&#34;:&#34;(0.06, 0.08]&#34;},{&#34;x&#34;:0.09,&#34;y&#34;:1,&#34;name&#34;:&#34;(0.08, 0.1]&#34;},{&#34;x&#34;:0.11,&#34;y&#34;:2,&#34;name&#34;:&#34;(0.1, 0.12]&#34;}],&#34;type&#34;:&#34;column&#34;,&#34;pointRange&#34;:0.02,&#34;groupPadding&#34;:0,&#34;pointPadding&#34;:0,&#34;borderWidth&#34;:0,&#34;color&#34;:&#34;cornflowerblue&#34;}],&#34;legend&#34;:{&#34;enabled&#34;:false}},&#34;theme&#34;:{&#34;colors&#34;:[&#34;#f1c40f&#34;,&#34;#2ecc71&#34;,&#34;#9b59b6&#34;,&#34;#e74c3c&#34;,&#34;#34495e&#34;,&#34;#3498db&#34;,&#34;#1abc9c&#34;,&#34;#f39c12&#34;,&#34;#d35400&#34;],&#34;chart&#34;:{&#34;backgroundColor&#34;:&#34;#ECF0F1&#34;},&#34;xAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineWidth&#34;:1,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;yAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;legendBackgroundColor&#34;:&#34;rgba(0, 0, 0, 0.5)&#34;,&#34;background2&#34;:&#34;#505053&#34;,&#34;dataLabelsColor&#34;:&#34;#B0B0B3&#34;,&#34;textColor&#34;:&#34;#34495e&#34;,&#34;contrastTextColor&#34;:&#34;#F0F0F3&#34;,&#34;maskColor&#34;:&#34;rgba(255,255,255,0.3)&#34;},&#34;conf_opts&#34;:{&#34;global&#34;:{&#34;Date&#34;:null,&#34;VMLRadialGradientURL&#34;:&#34;http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png&#34;,&#34;canvasToolsURL&#34;:&#34;http =//code.highcharts.com/list(version)/modules/canvas-tools.js&#34;,&#34;getTimezoneOffset&#34;:null,&#34;timezoneOffset&#34;:0,&#34;useUTC&#34;:true},&#34;lang&#34;:{&#34;contextButtonTitle&#34;:&#34;Chart context menu&#34;,&#34;decimalPoint&#34;:&#34;.&#34;,&#34;downloadJPEG&#34;:&#34;Download JPEG image&#34;,&#34;downloadPDF&#34;:&#34;Download PDF document&#34;,&#34;downloadPNG&#34;:&#34;Download PNG image&#34;,&#34;downloadSVG&#34;:&#34;Download SVG vector image&#34;,&#34;drillUpText&#34;:&#34;Back to {series.name}&#34;,&#34;invalidDate&#34;:null,&#34;loading&#34;:&#34;Loading...&#34;,&#34;months&#34;:[&#34;January&#34;,&#34;February&#34;,&#34;March&#34;,&#34;April&#34;,&#34;May&#34;,&#34;June&#34;,&#34;July&#34;,&#34;August&#34;,&#34;September&#34;,&#34;October&#34;,&#34;November&#34;,&#34;December&#34;],&#34;noData&#34;:&#34;No data to display&#34;,&#34;numericSymbols&#34;:[&#34;k&#34;,&#34;M&#34;,&#34;G&#34;,&#34;T&#34;,&#34;P&#34;,&#34;E&#34;],&#34;printChart&#34;:&#34;Print chart&#34;,&#34;resetZoom&#34;:&#34;Reset zoom&#34;,&#34;resetZoomTitle&#34;:&#34;Reset zoom level 1:1&#34;,&#34;shortMonths&#34;:[&#34;Jan&#34;,&#34;Feb&#34;,&#34;Mar&#34;,&#34;Apr&#34;,&#34;May&#34;,&#34;Jun&#34;,&#34;Jul&#34;,&#34;Aug&#34;,&#34;Sep&#34;,&#34;Oct&#34;,&#34;Nov&#34;,&#34;Dec&#34;],&#34;thousandsSep&#34;:&#34; &#34;,&#34;weekdays&#34;:[&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34;]}},&#34;type&#34;:&#34;chart&#34;,&#34;fonts&#34;:[],&#34;debug&#34;:false},&#34;evals&#34;:[&#34;hc_opts.tooltip.formatter&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
list_of_histogram[[2]]
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;highchart html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;hc_opts&#34;:{&#34;chart&#34;:{&#34;reflow&#34;:true,&#34;zoomType&#34;:&#34;x&#34;},&#34;title&#34;:{&#34;text&#34;:&#34;EFA Log Returns Distribution&#34;},&#34;yAxis&#34;:{&#34;title&#34;:{&#34;text&#34;:null}},&#34;credits&#34;:{&#34;enabled&#34;:false},&#34;exporting&#34;:{&#34;enabled&#34;:true},&#34;boost&#34;:{&#34;enabled&#34;:false},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;label&#34;:{&#34;enabled&#34;:false},&#34;turboThreshold&#34;:0},&#34;treemap&#34;:{&#34;layoutAlgorithm&#34;:&#34;squarified&#34;}},&#34;tooltip&#34;:{&#34;formatter&#34;:&#34;function() { return  this.point.name + &#39;&lt;br/&gt;&#39; + this.y; }&#34;},&#34;series&#34;:[{&#34;data&#34;:[{&#34;x&#34;:-0.15,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.16, -0.14]&#34;},{&#34;x&#34;:-0.13,&#34;y&#34;:0,&#34;name&#34;:&#34;(-0.14, -0.12]&#34;},{&#34;x&#34;:-0.11,&#34;y&#34;:0,&#34;name&#34;:&#34;(-0.12, -0.1]&#34;},{&#34;x&#34;:-0.09,&#34;y&#34;:2,&#34;name&#34;:&#34;(-0.1, -0.08]&#34;},{&#34;x&#34;:-0.07,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.08, -0.06]&#34;},{&#34;x&#34;:-0.05,&#34;y&#34;:7,&#34;name&#34;:&#34;(-0.06, -0.04]&#34;},{&#34;x&#34;:-0.03,&#34;y&#34;:13,&#34;name&#34;:&#34;(-0.04, -0.02]&#34;},{&#34;x&#34;:-0.01,&#34;y&#34;:16,&#34;name&#34;:&#34;(-0.02, 0]&#34;},{&#34;x&#34;:0.01,&#34;y&#34;:23,&#34;name&#34;:&#34;(2.77555756156289e-17, 0.02]&#34;},{&#34;x&#34;:0.03,&#34;y&#34;:25,&#34;name&#34;:&#34;(0.02, 0.04]&#34;},{&#34;x&#34;:0.05,&#34;y&#34;:9,&#34;name&#34;:&#34;(0.04, 0.06]&#34;},{&#34;x&#34;:0.07,&#34;y&#34;:5,&#34;name&#34;:&#34;(0.06, 0.08]&#34;},{&#34;x&#34;:0.0900000000000001,&#34;y&#34;:0,&#34;name&#34;:&#34;(0.0800000000000001, 0.1]&#34;},{&#34;x&#34;:0.11,&#34;y&#34;:0,&#34;name&#34;:&#34;(0.1, 0.12]&#34;},{&#34;x&#34;:0.13,&#34;y&#34;:1,&#34;name&#34;:&#34;(0.12, 0.14]&#34;}],&#34;type&#34;:&#34;column&#34;,&#34;pointRange&#34;:0.02,&#34;groupPadding&#34;:0,&#34;pointPadding&#34;:0,&#34;borderWidth&#34;:0,&#34;color&#34;:&#34;cornflowerblue&#34;}],&#34;legend&#34;:{&#34;enabled&#34;:false}},&#34;theme&#34;:{&#34;colors&#34;:[&#34;#f1c40f&#34;,&#34;#2ecc71&#34;,&#34;#9b59b6&#34;,&#34;#e74c3c&#34;,&#34;#34495e&#34;,&#34;#3498db&#34;,&#34;#1abc9c&#34;,&#34;#f39c12&#34;,&#34;#d35400&#34;],&#34;chart&#34;:{&#34;backgroundColor&#34;:&#34;#ECF0F1&#34;},&#34;xAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineWidth&#34;:1,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;yAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;legendBackgroundColor&#34;:&#34;rgba(0, 0, 0, 0.5)&#34;,&#34;background2&#34;:&#34;#505053&#34;,&#34;dataLabelsColor&#34;:&#34;#B0B0B3&#34;,&#34;textColor&#34;:&#34;#34495e&#34;,&#34;contrastTextColor&#34;:&#34;#F0F0F3&#34;,&#34;maskColor&#34;:&#34;rgba(255,255,255,0.3)&#34;},&#34;conf_opts&#34;:{&#34;global&#34;:{&#34;Date&#34;:null,&#34;VMLRadialGradientURL&#34;:&#34;http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png&#34;,&#34;canvasToolsURL&#34;:&#34;http =//code.highcharts.com/list(version)/modules/canvas-tools.js&#34;,&#34;getTimezoneOffset&#34;:null,&#34;timezoneOffset&#34;:0,&#34;useUTC&#34;:true},&#34;lang&#34;:{&#34;contextButtonTitle&#34;:&#34;Chart context menu&#34;,&#34;decimalPoint&#34;:&#34;.&#34;,&#34;downloadJPEG&#34;:&#34;Download JPEG image&#34;,&#34;downloadPDF&#34;:&#34;Download PDF document&#34;,&#34;downloadPNG&#34;:&#34;Download PNG image&#34;,&#34;downloadSVG&#34;:&#34;Download SVG vector image&#34;,&#34;drillUpText&#34;:&#34;Back to {series.name}&#34;,&#34;invalidDate&#34;:null,&#34;loading&#34;:&#34;Loading...&#34;,&#34;months&#34;:[&#34;January&#34;,&#34;February&#34;,&#34;March&#34;,&#34;April&#34;,&#34;May&#34;,&#34;June&#34;,&#34;July&#34;,&#34;August&#34;,&#34;September&#34;,&#34;October&#34;,&#34;November&#34;,&#34;December&#34;],&#34;noData&#34;:&#34;No data to display&#34;,&#34;numericSymbols&#34;:[&#34;k&#34;,&#34;M&#34;,&#34;G&#34;,&#34;T&#34;,&#34;P&#34;,&#34;E&#34;],&#34;printChart&#34;:&#34;Print chart&#34;,&#34;resetZoom&#34;:&#34;Reset zoom&#34;,&#34;resetZoomTitle&#34;:&#34;Reset zoom level 1:1&#34;,&#34;shortMonths&#34;:[&#34;Jan&#34;,&#34;Feb&#34;,&#34;Mar&#34;,&#34;Apr&#34;,&#34;May&#34;,&#34;Jun&#34;,&#34;Jul&#34;,&#34;Aug&#34;,&#34;Sep&#34;,&#34;Oct&#34;,&#34;Nov&#34;,&#34;Dec&#34;],&#34;thousandsSep&#34;:&#34; &#34;,&#34;weekdays&#34;:[&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34;]}},&#34;type&#34;:&#34;chart&#34;,&#34;fonts&#34;:[],&#34;debug&#34;:false},&#34;evals&#34;:[&#34;hc_opts.tooltip.formatter&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
list_of_histogram[[3]]
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;highchart html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;hc_opts&#34;:{&#34;chart&#34;:{&#34;reflow&#34;:true,&#34;zoomType&#34;:&#34;x&#34;},&#34;title&#34;:{&#34;text&#34;:&#34;DIA Log Returns Distribution&#34;},&#34;yAxis&#34;:{&#34;title&#34;:{&#34;text&#34;:null}},&#34;credits&#34;:{&#34;enabled&#34;:false},&#34;exporting&#34;:{&#34;enabled&#34;:true},&#34;boost&#34;:{&#34;enabled&#34;:false},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;label&#34;:{&#34;enabled&#34;:false},&#34;turboThreshold&#34;:0},&#34;treemap&#34;:{&#34;layoutAlgorithm&#34;:&#34;squarified&#34;}},&#34;tooltip&#34;:{&#34;formatter&#34;:&#34;function() { return  this.point.name + &#39;&lt;br/&gt;&#39; + this.y; }&#34;},&#34;series&#34;:[{&#34;data&#34;:[{&#34;x&#34;:-0.15,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.16, -0.14]&#34;},{&#34;x&#34;:-0.13,&#34;y&#34;:0,&#34;name&#34;:&#34;(-0.14, -0.12]&#34;},{&#34;x&#34;:-0.11,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.12, -0.1]&#34;},{&#34;x&#34;:-0.09,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.1, -0.08]&#34;},{&#34;x&#34;:-0.07,&#34;y&#34;:2,&#34;name&#34;:&#34;(-0.08, -0.06]&#34;},{&#34;x&#34;:-0.05,&#34;y&#34;:6,&#34;name&#34;:&#34;(-0.06, -0.04]&#34;},{&#34;x&#34;:-0.03,&#34;y&#34;:4,&#34;name&#34;:&#34;(-0.04, -0.02]&#34;},{&#34;x&#34;:-0.01,&#34;y&#34;:14,&#34;name&#34;:&#34;(-0.02, 0]&#34;},{&#34;x&#34;:0.01,&#34;y&#34;:32,&#34;name&#34;:&#34;(0, 0.02]&#34;},{&#34;x&#34;:0.03,&#34;y&#34;:23,&#34;name&#34;:&#34;(0.02, 0.04]&#34;},{&#34;x&#34;:0.05,&#34;y&#34;:11,&#34;name&#34;:&#34;(0.04, 0.06]&#34;},{&#34;x&#34;:0.07,&#34;y&#34;:5,&#34;name&#34;:&#34;(0.06, 0.08]&#34;},{&#34;x&#34;:0.09,&#34;y&#34;:1,&#34;name&#34;:&#34;(0.08, 0.1]&#34;},{&#34;x&#34;:0.11,&#34;y&#34;:2,&#34;name&#34;:&#34;(0.1, 0.12]&#34;}],&#34;type&#34;:&#34;column&#34;,&#34;pointRange&#34;:0.02,&#34;groupPadding&#34;:0,&#34;pointPadding&#34;:0,&#34;borderWidth&#34;:0,&#34;color&#34;:&#34;cornflowerblue&#34;}],&#34;legend&#34;:{&#34;enabled&#34;:false}},&#34;theme&#34;:{&#34;colors&#34;:[&#34;#f1c40f&#34;,&#34;#2ecc71&#34;,&#34;#9b59b6&#34;,&#34;#e74c3c&#34;,&#34;#34495e&#34;,&#34;#3498db&#34;,&#34;#1abc9c&#34;,&#34;#f39c12&#34;,&#34;#d35400&#34;],&#34;chart&#34;:{&#34;backgroundColor&#34;:&#34;#ECF0F1&#34;},&#34;xAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineWidth&#34;:1,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;yAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;legendBackgroundColor&#34;:&#34;rgba(0, 0, 0, 0.5)&#34;,&#34;background2&#34;:&#34;#505053&#34;,&#34;dataLabelsColor&#34;:&#34;#B0B0B3&#34;,&#34;textColor&#34;:&#34;#34495e&#34;,&#34;contrastTextColor&#34;:&#34;#F0F0F3&#34;,&#34;maskColor&#34;:&#34;rgba(255,255,255,0.3)&#34;},&#34;conf_opts&#34;:{&#34;global&#34;:{&#34;Date&#34;:null,&#34;VMLRadialGradientURL&#34;:&#34;http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png&#34;,&#34;canvasToolsURL&#34;:&#34;http =//code.highcharts.com/list(version)/modules/canvas-tools.js&#34;,&#34;getTimezoneOffset&#34;:null,&#34;timezoneOffset&#34;:0,&#34;useUTC&#34;:true},&#34;lang&#34;:{&#34;contextButtonTitle&#34;:&#34;Chart context menu&#34;,&#34;decimalPoint&#34;:&#34;.&#34;,&#34;downloadJPEG&#34;:&#34;Download JPEG image&#34;,&#34;downloadPDF&#34;:&#34;Download PDF document&#34;,&#34;downloadPNG&#34;:&#34;Download PNG image&#34;,&#34;downloadSVG&#34;:&#34;Download SVG vector image&#34;,&#34;drillUpText&#34;:&#34;Back to {series.name}&#34;,&#34;invalidDate&#34;:null,&#34;loading&#34;:&#34;Loading...&#34;,&#34;months&#34;:[&#34;January&#34;,&#34;February&#34;,&#34;March&#34;,&#34;April&#34;,&#34;May&#34;,&#34;June&#34;,&#34;July&#34;,&#34;August&#34;,&#34;September&#34;,&#34;October&#34;,&#34;November&#34;,&#34;December&#34;],&#34;noData&#34;:&#34;No data to display&#34;,&#34;numericSymbols&#34;:[&#34;k&#34;,&#34;M&#34;,&#34;G&#34;,&#34;T&#34;,&#34;P&#34;,&#34;E&#34;],&#34;printChart&#34;:&#34;Print chart&#34;,&#34;resetZoom&#34;:&#34;Reset zoom&#34;,&#34;resetZoomTitle&#34;:&#34;Reset zoom level 1:1&#34;,&#34;shortMonths&#34;:[&#34;Jan&#34;,&#34;Feb&#34;,&#34;Mar&#34;,&#34;Apr&#34;,&#34;May&#34;,&#34;Jun&#34;,&#34;Jul&#34;,&#34;Aug&#34;,&#34;Sep&#34;,&#34;Oct&#34;,&#34;Nov&#34;,&#34;Dec&#34;],&#34;thousandsSep&#34;:&#34; &#34;,&#34;weekdays&#34;:[&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34;]}},&#34;type&#34;:&#34;chart&#34;,&#34;fonts&#34;:[],&#34;debug&#34;:false},&#34;evals&#34;:[&#34;hc_opts.tooltip.formatter&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
list_of_histogram[[4]]
&lt;div id=&#34;htmlwidget-5&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;highchart html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;hc_opts&#34;:{&#34;chart&#34;:{&#34;reflow&#34;:true,&#34;zoomType&#34;:&#34;x&#34;},&#34;title&#34;:{&#34;text&#34;:&#34;QQQ Log Returns Distribution&#34;},&#34;yAxis&#34;:{&#34;title&#34;:{&#34;text&#34;:null}},&#34;credits&#34;:{&#34;enabled&#34;:false},&#34;exporting&#34;:{&#34;enabled&#34;:true},&#34;boost&#34;:{&#34;enabled&#34;:false},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;label&#34;:{&#34;enabled&#34;:false},&#34;turboThreshold&#34;:0},&#34;treemap&#34;:{&#34;layoutAlgorithm&#34;:&#34;squarified&#34;}},&#34;tooltip&#34;:{&#34;formatter&#34;:&#34;function() { return  this.point.name + &#39;&lt;br/&gt;&#39; + this.y; }&#34;},&#34;series&#34;:[{&#34;data&#34;:[{&#34;x&#34;:-0.09,&#34;y&#34;:3,&#34;name&#34;:&#34;(-0.1, -0.08]&#34;},{&#34;x&#34;:-0.07,&#34;y&#34;:4,&#34;name&#34;:&#34;(-0.08, -0.06]&#34;},{&#34;x&#34;:-0.05,&#34;y&#34;:2,&#34;name&#34;:&#34;(-0.06, -0.04]&#34;},{&#34;x&#34;:-0.03,&#34;y&#34;:11,&#34;name&#34;:&#34;(-0.04, -0.02]&#34;},{&#34;x&#34;:-0.01,&#34;y&#34;:14,&#34;name&#34;:&#34;(-0.02, 0]&#34;},{&#34;x&#34;:0.01,&#34;y&#34;:14,&#34;name&#34;:&#34;(-6.93889390390723e-18, 0.02]&#34;},{&#34;x&#34;:0.03,&#34;y&#34;:23,&#34;name&#34;:&#34;(0.02, 0.04]&#34;},{&#34;x&#34;:0.05,&#34;y&#34;:17,&#34;name&#34;:&#34;(0.04, 0.06]&#34;},{&#34;x&#34;:0.07,&#34;y&#34;:9,&#34;name&#34;:&#34;(0.06, 0.08]&#34;},{&#34;x&#34;:0.09,&#34;y&#34;:2,&#34;name&#34;:&#34;(0.08, 0.1]&#34;},{&#34;x&#34;:0.11,&#34;y&#34;:3,&#34;name&#34;:&#34;(0.1, 0.12]&#34;},{&#34;x&#34;:0.13,&#34;y&#34;:1,&#34;name&#34;:&#34;(0.12, 0.14]&#34;}],&#34;type&#34;:&#34;column&#34;,&#34;pointRange&#34;:0.02,&#34;groupPadding&#34;:0,&#34;pointPadding&#34;:0,&#34;borderWidth&#34;:0,&#34;color&#34;:&#34;cornflowerblue&#34;}],&#34;legend&#34;:{&#34;enabled&#34;:false}},&#34;theme&#34;:{&#34;colors&#34;:[&#34;#f1c40f&#34;,&#34;#2ecc71&#34;,&#34;#9b59b6&#34;,&#34;#e74c3c&#34;,&#34;#34495e&#34;,&#34;#3498db&#34;,&#34;#1abc9c&#34;,&#34;#f39c12&#34;,&#34;#d35400&#34;],&#34;chart&#34;:{&#34;backgroundColor&#34;:&#34;#ECF0F1&#34;},&#34;xAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineWidth&#34;:1,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;yAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;legendBackgroundColor&#34;:&#34;rgba(0, 0, 0, 0.5)&#34;,&#34;background2&#34;:&#34;#505053&#34;,&#34;dataLabelsColor&#34;:&#34;#B0B0B3&#34;,&#34;textColor&#34;:&#34;#34495e&#34;,&#34;contrastTextColor&#34;:&#34;#F0F0F3&#34;,&#34;maskColor&#34;:&#34;rgba(255,255,255,0.3)&#34;},&#34;conf_opts&#34;:{&#34;global&#34;:{&#34;Date&#34;:null,&#34;VMLRadialGradientURL&#34;:&#34;http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png&#34;,&#34;canvasToolsURL&#34;:&#34;http =//code.highcharts.com/list(version)/modules/canvas-tools.js&#34;,&#34;getTimezoneOffset&#34;:null,&#34;timezoneOffset&#34;:0,&#34;useUTC&#34;:true},&#34;lang&#34;:{&#34;contextButtonTitle&#34;:&#34;Chart context menu&#34;,&#34;decimalPoint&#34;:&#34;.&#34;,&#34;downloadJPEG&#34;:&#34;Download JPEG image&#34;,&#34;downloadPDF&#34;:&#34;Download PDF document&#34;,&#34;downloadPNG&#34;:&#34;Download PNG image&#34;,&#34;downloadSVG&#34;:&#34;Download SVG vector image&#34;,&#34;drillUpText&#34;:&#34;Back to {series.name}&#34;,&#34;invalidDate&#34;:null,&#34;loading&#34;:&#34;Loading...&#34;,&#34;months&#34;:[&#34;January&#34;,&#34;February&#34;,&#34;March&#34;,&#34;April&#34;,&#34;May&#34;,&#34;June&#34;,&#34;July&#34;,&#34;August&#34;,&#34;September&#34;,&#34;October&#34;,&#34;November&#34;,&#34;December&#34;],&#34;noData&#34;:&#34;No data to display&#34;,&#34;numericSymbols&#34;:[&#34;k&#34;,&#34;M&#34;,&#34;G&#34;,&#34;T&#34;,&#34;P&#34;,&#34;E&#34;],&#34;printChart&#34;:&#34;Print chart&#34;,&#34;resetZoom&#34;:&#34;Reset zoom&#34;,&#34;resetZoomTitle&#34;:&#34;Reset zoom level 1:1&#34;,&#34;shortMonths&#34;:[&#34;Jan&#34;,&#34;Feb&#34;,&#34;Mar&#34;,&#34;Apr&#34;,&#34;May&#34;,&#34;Jun&#34;,&#34;Jul&#34;,&#34;Aug&#34;,&#34;Sep&#34;,&#34;Oct&#34;,&#34;Nov&#34;,&#34;Dec&#34;],&#34;thousandsSep&#34;:&#34; &#34;,&#34;weekdays&#34;:[&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34;]}},&#34;type&#34;:&#34;chart&#34;,&#34;fonts&#34;:[],&#34;debug&#34;:false},&#34;evals&#34;:[&#34;hc_opts.tooltip.formatter&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
list_of_histogram[[5]]
&lt;div id=&#34;htmlwidget-6&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;highchart html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;hc_opts&#34;:{&#34;chart&#34;:{&#34;reflow&#34;:true,&#34;zoomType&#34;:&#34;x&#34;},&#34;title&#34;:{&#34;text&#34;:&#34;AGG Log Returns Distribution&#34;},&#34;yAxis&#34;:{&#34;title&#34;:{&#34;text&#34;:null}},&#34;credits&#34;:{&#34;enabled&#34;:false},&#34;exporting&#34;:{&#34;enabled&#34;:true},&#34;boost&#34;:{&#34;enabled&#34;:false},&#34;plotOptions&#34;:{&#34;series&#34;:{&#34;label&#34;:{&#34;enabled&#34;:false},&#34;turboThreshold&#34;:0},&#34;treemap&#34;:{&#34;layoutAlgorithm&#34;:&#34;squarified&#34;}},&#34;tooltip&#34;:{&#34;formatter&#34;:&#34;function() { return  this.point.name + &#39;&lt;br/&gt;&#39; + this.y; }&#34;},&#34;series&#34;:[{&#34;data&#34;:[{&#34;x&#34;:-0.0275,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.03, -0.025]&#34;},{&#34;x&#34;:-0.0225,&#34;y&#34;:1,&#34;name&#34;:&#34;(-0.025, -0.02]&#34;},{&#34;x&#34;:-0.0175,&#34;y&#34;:2,&#34;name&#34;:&#34;(-0.02, -0.015]&#34;},{&#34;x&#34;:-0.0125,&#34;y&#34;:4,&#34;name&#34;:&#34;(-0.015, -0.01]&#34;},{&#34;x&#34;:-0.0075,&#34;y&#34;:15,&#34;name&#34;:&#34;(-0.01, -0.005]&#34;},{&#34;x&#34;:-0.0025,&#34;y&#34;:19,&#34;name&#34;:&#34;(-0.005, 1.73472347597681e-18]&#34;},{&#34;x&#34;:0.0025,&#34;y&#34;:19,&#34;name&#34;:&#34;(1.73472347597681e-18, 0.005]&#34;},{&#34;x&#34;:0.0075,&#34;y&#34;:23,&#34;name&#34;:&#34;(0.005, 0.01]&#34;},{&#34;x&#34;:0.0125,&#34;y&#34;:9,&#34;name&#34;:&#34;(0.01, 0.015]&#34;},{&#34;x&#34;:0.0175,&#34;y&#34;:6,&#34;name&#34;:&#34;(0.015, 0.02]&#34;},{&#34;x&#34;:0.0225,&#34;y&#34;:3,&#34;name&#34;:&#34;(0.02, 0.025]&#34;},{&#34;x&#34;:0.0275,&#34;y&#34;:1,&#34;name&#34;:&#34;(0.025, 0.03]&#34;}],&#34;type&#34;:&#34;column&#34;,&#34;pointRange&#34;:0.005,&#34;groupPadding&#34;:0,&#34;pointPadding&#34;:0,&#34;borderWidth&#34;:0,&#34;color&#34;:&#34;cornflowerblue&#34;}],&#34;legend&#34;:{&#34;enabled&#34;:false}},&#34;theme&#34;:{&#34;colors&#34;:[&#34;#f1c40f&#34;,&#34;#2ecc71&#34;,&#34;#9b59b6&#34;,&#34;#e74c3c&#34;,&#34;#34495e&#34;,&#34;#3498db&#34;,&#34;#1abc9c&#34;,&#34;#f39c12&#34;,&#34;#d35400&#34;],&#34;chart&#34;:{&#34;backgroundColor&#34;:&#34;#ECF0F1&#34;},&#34;xAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineWidth&#34;:1,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;yAxis&#34;:{&#34;gridLineDashStyle&#34;:&#34;Dash&#34;,&#34;gridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;lineColor&#34;:&#34;#BDC3C7&#34;,&#34;minorGridLineColor&#34;:&#34;#BDC3C7&#34;,&#34;tickColor&#34;:&#34;#BDC3C7&#34;,&#34;tickWidth&#34;:1},&#34;legendBackgroundColor&#34;:&#34;rgba(0, 0, 0, 0.5)&#34;,&#34;background2&#34;:&#34;#505053&#34;,&#34;dataLabelsColor&#34;:&#34;#B0B0B3&#34;,&#34;textColor&#34;:&#34;#34495e&#34;,&#34;contrastTextColor&#34;:&#34;#F0F0F3&#34;,&#34;maskColor&#34;:&#34;rgba(255,255,255,0.3)&#34;},&#34;conf_opts&#34;:{&#34;global&#34;:{&#34;Date&#34;:null,&#34;VMLRadialGradientURL&#34;:&#34;http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png&#34;,&#34;canvasToolsURL&#34;:&#34;http =//code.highcharts.com/list(version)/modules/canvas-tools.js&#34;,&#34;getTimezoneOffset&#34;:null,&#34;timezoneOffset&#34;:0,&#34;useUTC&#34;:true},&#34;lang&#34;:{&#34;contextButtonTitle&#34;:&#34;Chart context menu&#34;,&#34;decimalPoint&#34;:&#34;.&#34;,&#34;downloadJPEG&#34;:&#34;Download JPEG image&#34;,&#34;downloadPDF&#34;:&#34;Download PDF document&#34;,&#34;downloadPNG&#34;:&#34;Download PNG image&#34;,&#34;downloadSVG&#34;:&#34;Download SVG vector image&#34;,&#34;drillUpText&#34;:&#34;Back to {series.name}&#34;,&#34;invalidDate&#34;:null,&#34;loading&#34;:&#34;Loading...&#34;,&#34;months&#34;:[&#34;January&#34;,&#34;February&#34;,&#34;March&#34;,&#34;April&#34;,&#34;May&#34;,&#34;June&#34;,&#34;July&#34;,&#34;August&#34;,&#34;September&#34;,&#34;October&#34;,&#34;November&#34;,&#34;December&#34;],&#34;noData&#34;:&#34;No data to display&#34;,&#34;numericSymbols&#34;:[&#34;k&#34;,&#34;M&#34;,&#34;G&#34;,&#34;T&#34;,&#34;P&#34;,&#34;E&#34;],&#34;printChart&#34;:&#34;Print chart&#34;,&#34;resetZoom&#34;:&#34;Reset zoom&#34;,&#34;resetZoomTitle&#34;:&#34;Reset zoom level 1:1&#34;,&#34;shortMonths&#34;:[&#34;Jan&#34;,&#34;Feb&#34;,&#34;Mar&#34;,&#34;Apr&#34;,&#34;May&#34;,&#34;Jun&#34;,&#34;Jul&#34;,&#34;Aug&#34;,&#34;Sep&#34;,&#34;Oct&#34;,&#34;Nov&#34;,&#34;Dec&#34;],&#34;thousandsSep&#34;:&#34; &#34;,&#34;weekdays&#34;:[&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34;]}},&#34;type&#34;:&#34;chart&#34;,&#34;fonts&#34;:[],&#34;debug&#34;:false},&#34;evals&#34;:[&#34;hc_opts.tooltip.formatter&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizations-in-the-tidyvserse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizations in the tidyvserse&lt;/h2&gt;
&lt;p&gt;Similarly, we can plot our asset returns using &lt;code&gt;ggplot2&lt;/code&gt;, which implements the layered grammar of graphics approach. For efficiency, we will convert the xts object into the &lt;em&gt;long tidy&lt;/em&gt; format that the tidyverse functions are designed to work well with. For another method of data importation, please see my other posts.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hereâs the histogram; notice that we can overlay the histograms on top of each other or show them in separate panels. I recommend using the panel approach for studying the shapes of the univariate distributions, and employ the overlaying histograms for making comparisons between these distributions.&lt;/p&gt;
&lt;div id=&#34;histogram&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Histogram&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute Freedman-Diaconis bin numbers
bins_fd &amp;lt;- function(vec) {
  diff(range(vec)) / (2 * IQR(vec) / length(vec)^(1 / 3))
}
# Histogram
ggplot(data = asset_returns_dplyr, mapping = aes(x = returns)) +
  geom_histogram(
    alpha = 0.5,
    mapping = aes(fill = asset),
    bins = bins_fd(asset_returns_dplyr[[&amp;quot;returns&amp;quot;]])
  ) +
  ggtitle(&amp;quot;Distributions of Monthly Log Returns&amp;quot;) +
  theme(
    panel.background = element_rect(fill = &amp;quot;grey97&amp;quot;),
    panel.grid = element_blank(),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Histogram with panels
ggplot(data = asset_returns_dplyr, mapping = aes(x = returns)) +
  geom_histogram(
    alpha = 0.5,
    mapping = aes(fill = asset),
    bins = bins_fd(asset_returns_dplyr[[&amp;quot;returns&amp;quot;]])
  ) +
  facet_wrap(~asset) +
  ggtitle(&amp;quot;Distributions of Monthly Log Returns&amp;quot;) +
  theme(
    panel.background = element_rect(fill = &amp;quot;grey97&amp;quot;),
    panel.grid = element_blank(),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;densty&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Densty&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Density plot
ggplot(data = asset_returns_dplyr, mapping = aes(x = returns)) +
  geom_density(mapping = aes(color = asset)) +
  ggtitle(&amp;quot;Distributions of Monthly Log Returns&amp;quot;) +
  theme(
    panel.background = element_rect(fill = &amp;quot;grey97&amp;quot;),
    panel.grid = element_blank(),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Density plot with panels
ggplot(data = asset_returns_dplyr, mapping = aes(x = returns)) +
  geom_density(mapping = aes(color = asset)) +
  geom_histogram(
    alpha = 0.5,
    mapping = aes(fill = asset),
    bins = bins_fd(asset_returns_dplyr[[&amp;quot;returns&amp;quot;]])
  ) +
  facet_wrap(~asset) +
  ggtitle(&amp;quot;Distributions of Monthly Log Returns&amp;quot;) +
  theme(
    panel.background = element_rect(fill = &amp;quot;grey97&amp;quot;),
    panel.grid = element_blank(),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;YangWu1227.github.io/post/visualization-asset-returns/index_files/figure-html/unnamed-chunk-8-2.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Portfolio Optimization &amp; Returns</title>
      <link>YangWu1227.github.io/post/portfolio-returns-and-optimization/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      <guid>YangWu1227.github.io/post/portfolio-returns-and-optimization/</guid>
      <description>
&lt;script src=&#34;YangWu1227.github.io/post/portfolio-returns-and-optimization/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;optimal-weights-for-the-five-asset-portfolio-minimum-variance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal Weights for the five-asset portfolio (Minimum Variance)&lt;/h2&gt;
&lt;p&gt;We employ Markowitzâs Mean-Variance model as the framework for computing optimal weights, essentially treating this as an âunconstrainedâ problem. The objective of this optimization problem is one of minimization:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\text{Minimize}\hspace{2mm}(\sigma^{2}=\vec{W}^{T}\sum\vec{W}))
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to the sum of weights constraint and the box constraint:
&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{N} W_{i}=1 \quad \text { and } \hspace{3mm} \varepsilon_{i} \leq W_{i} \leq \delta_{i}
\]&lt;/span&gt;
where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\varepsilon_{i}=0.05 \hspace{3mm} \delta_{i}=0.6\)&lt;/span&gt; are the lower and upper bounds for the weights &lt;span class=&#34;math inline&#34;&gt;\(W_{i}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The minimization problem is a quadratic problem with linear constraints, since the variance formula is a quadratic function and the constraints are linear functions; this type of problem is well suited to be solved using a quadratic programming solver. The &lt;code&gt;PortfolioAnalytics&lt;/code&gt; package uses &lt;code&gt;ROI.plugin.quadprog&lt;/code&gt;, a plug-in for the âRâ Optimization Infrastructure, to solve the problem. The solver can be specified with the optimize_method argument in &lt;code&gt;optimize.portfolio()&lt;/code&gt;. If optimize_method = âROIâ is specified, a default solver will be selected based on the optimization problem. The &lt;code&gt;glpk&lt;/code&gt; solver is the default solver for LP and MILP optimization problems. The
&lt;code&gt;quadprog&lt;/code&gt; solver is the default solver for QP optimization problems.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;implementation-in-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementation in R&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create Portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Examine the monthly simple returns for our five ETF&amp;#39;s
head(x = asset_returns_xts, 5)
                  SPY         EFA         IJS          EEM           AGG
2013-01-31 0.05119052  0.03728466 0.053516334 -0.002930946 -0.0062116229
2013-02-28 0.01275821 -0.01288577 0.016306731 -0.022840526  0.0059086208
2013-03-31 0.03797176  0.01305398 0.041079862 -0.010182972  0.0009852202
2013-04-30 0.01921213  0.05018653 0.001223168  0.012158139  0.0096857757
2013-05-31 0.02360972 -0.03019051 0.042869516 -0.048279085 -0.0200111149
# Create Portfolio object which is a R list object
min_var_portfolio &amp;lt;- PortfolioAnalytics::portfolio.spec(assets = symbols)
typeof(min_var_portfolio)
[1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add constraints to the portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the full investment constraint that specifies the weights must sum to 1
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = min_var_portfolio,
  type = &amp;quot;full_investment&amp;quot;
)
# Examine the constraint element by extracting min_var_portfolio[[&amp;quot;constraints&amp;quot;]][[1]]
str(pluck(.x = min_var_portfolio, &amp;quot;constraints&amp;quot;, 1))
List of 6
 $ type   : chr &amp;quot;full_investment&amp;quot;
 $ enabled: logi TRUE
 $ message: logi FALSE
 $ min_sum: num 1
 $ max_sum: num 1
 $ call   : language PortfolioAnalytics::add.constraint(portfolio = min_var_portfolio, type = &amp;quot;full_investment&amp;quot;)
 - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;weight_sum_constraint&amp;quot; &amp;quot;constraint&amp;quot;
# Add the box constraint that ensure the weights are between 0.1 and 0.6
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = min_var_portfolio,
  type = &amp;quot;box&amp;quot;, min = 0.05, max = 0.6
)
# Examine the constraint element by extracting min_var_portfolio[[&amp;quot;constraints&amp;quot;]][[2]]
str(pluck(.x = min_var_portfolio, &amp;quot;constraints&amp;quot;, 2))
List of 5
 $ type   : chr &amp;quot;box&amp;quot;
 $ enabled: logi TRUE
 $ min    : Named num [1:5] 0.05 0.05 0.05 0.05 0.05
  ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;SPY&amp;quot; &amp;quot;EFA&amp;quot; &amp;quot;IJS&amp;quot; &amp;quot;EEM&amp;quot; ...
 $ max    : Named num [1:5] 0.6 0.6 0.6 0.6 0.6
  ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;SPY&amp;quot; &amp;quot;EFA&amp;quot; &amp;quot;IJS&amp;quot; &amp;quot;EEM&amp;quot; ...
 $ call   : language PortfolioAnalytics::add.constraint(portfolio = min_var_portfolio, type = &amp;quot;box&amp;quot;,      min = 0.05, max = 0.6)
 - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;box_constraint&amp;quot; &amp;quot;constraint&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add objective function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add objective to minimize variance
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.objective(
  portfolio = min_var_portfolio,
  # Minimize risk
  type = &amp;quot;risk&amp;quot;,
  # A character corresponding to a function name, var()
  name = &amp;quot;var&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run the optimization
global_min_portfolio &amp;lt;- PortfolioAnalytics::optimize.portfolio(
  R = asset_returns_xts,
  portfolio = min_var_portfolio,
  # This defaults to the &amp;quot;quadprog&amp;quot; solver
  optimize_method = &amp;quot;quadprog&amp;quot;,
  # Return additional information on the path or portfolios searched
  trace = TRUE
)
# Examine returned portfolio list object
global_min_portfolio
***********************************
PortfolioAnalytics Optimization
***********************************

Call:
PortfolioAnalytics::optimize.portfolio(R = asset_returns_xts, 
    portfolio = min_var_portfolio, optimize_method = &amp;quot;quadprog&amp;quot;, 
    trace = TRUE)

Optimal Weights:
   SPY    EFA    IJS    EEM    AGG 
0.2215 0.0785 0.0500 0.0500 0.6000 

Objective Measure:
 StdDev 
0.01655 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;optimal-weights-for-the-five-asset-portfolio-maximum-expected-return&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal Weights for the five-asset portfolio (Maximum Expected Return)&lt;/h2&gt;
&lt;p&gt;The objective may also be one of maximization:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\text{Maximize}\hspace{2mm}(\vec{\mu}^{T}\vec{W})
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to the sum of weights constraint and the box constraint:
&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{N} W_{i}=1 \quad \text { and } \hspace{3mm} \varepsilon_{i} \leq W_{i} \leq \delta_{i}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The optimization in this case is a linear programming problem, since the portfolio expected return formula is a linear function. This is best tackled using a linear programming solver. The package &lt;code&gt;PortfolioAnalytics&lt;/code&gt; uses the ROI package with the &lt;code&gt;glpk plugin&lt;/code&gt;, the GNU Linear Programming toolkit of Râs Optimization Infrastructure.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;implementation-in-r-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementation in R&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create Portfolio object
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::portfolio.spec(assets = symbols)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add constraints to the object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the full investment constraint that specifies the weights must sum to 1
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = max_exp_return_portfolio,
  type = &amp;quot;full_investment&amp;quot;
)
# Add the box constraint that ensure the weights are between 0.1 and 0.6
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = max_exp_return_portfolio,
  type = &amp;quot;box&amp;quot;, min = 0.05, max = 0.6
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add objective function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add objective to maximize mean returns
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.objective(
  portfolio = max_exp_return_portfolio,
  # Maximize expected returns
  type = &amp;quot;return&amp;quot;,
  # A character corresponding to a function name, mean()
  name = &amp;quot;mean&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run the optimization
global_max_portfolio &amp;lt;- PortfolioAnalytics::optimize.portfolio(
  R = asset_returns_xts,
  portfolio = max_exp_return_portfolio,
  # This defaults to the &amp;quot;glpk&amp;quot; solver
  optimize_method = &amp;quot;glpk&amp;quot;,
  # Return additional information on the path or portfolios searched
  trace = TRUE
)
# Examine returned portfolio list object
global_max_portfolio
***********************************
PortfolioAnalytics Optimization
***********************************

Call:
PortfolioAnalytics::optimize.portfolio(R = asset_returns_xts, 
    portfolio = max_exp_return_portfolio, optimize_method = &amp;quot;glpk&amp;quot;, 
    trace = TRUE)

Optimal Weights:
 SPY  EFA  IJS  EEM  AGG 
0.60 0.05 0.25 0.05 0.05 

Objective Measure:
   mean 
0.01161 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;building-a-portfolio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Building a portfolio&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set optimal weights
weights &amp;lt;- pluck(.x = global_max_portfolio, &amp;quot;weights&amp;quot;)
# Check if the weights and symbols align
tibble(weights, symbols)
# A tibble: 5 Ã 2
  weights symbols
    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
1   0.6   SPY    
2   0.05  EFA    
3   0.250 IJS    
4   0.05  EEM    
5   0.05  AGG    
# Ensure that the weights vector sums up to 1
tibble(weights, symbols) %&amp;gt;%
  dplyr::summarize(total_weight = sum(weights))
# A tibble: 1 Ã 1
  total_weight
         &amp;lt;dbl&amp;gt;
1            1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The portfolio return in month, &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, is given by:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
r_{\text{portfolio,t}}=\sum_{i=1}^{5}W_{i}r^{cc}_{i,t}
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;monthly-portfolio-returns-by-hand&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns by hand&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute by hand
portfolio_returns_by_hand &amp;lt;-
  (weights[[1]] * asset_returns_xts[, 1]) +
  (weights[[2]] * asset_returns_xts[, 2]) +
  (weights[[3]] * asset_returns_xts[, 3]) +
  (weights[[4]] * asset_returns_xts[, 4]) +
  (weights[[5]] * asset_returns_xts[, 5])
# Name the series
portfolio_returns_by_hand &amp;lt;- `names&amp;lt;-`(portfolio_returns_by_hand, &amp;quot;Monthly portfolio returns&amp;quot;)
# Examine
head(portfolio_returns_by_hand, 5)
           Monthly portfolio returns
2013-01-31                0.04550050
2013-02-28                0.01024073
2013-03-31                0.03324583
2013-04-30                0.01543459
2013-05-31                0.01995918&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-xts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in xts&lt;/h3&gt;
&lt;p&gt;Note that re-balancing the weights every month is unrealistic; in reality, we could choose annual overbalancing. For this case study, however, we will re-balance monthly to be consistent with our brute force computation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute monthly portfolio returns
portfolio_returns_xts_rebalanced_monthly &amp;lt;-
  PerformanceAnalytics::Return.portfolio(
    R = asset_returns_xts,
    weights = weights,
    # Monthly re-balancing
    reblance_on = &amp;quot;months&amp;quot;,
    # Use simple/arithmetic chaining to aggregate returns
    geometric = FALSE
  ) %&amp;gt;%
  `colnames&amp;lt;-`(&amp;quot;Monthly_portfolio_returns&amp;quot;)
# Examine
head(portfolio_returns_xts_rebalanced_monthly, 5)
           Monthly_portfolio_returns
2013-01-31                0.04550050
2013-02-28                0.01024073
2013-03-31                0.03324583
2013-04-30                0.01543459
2013-05-31                0.01995918&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function &lt;code&gt;Return.portfolio(R, weights = NULL, wealth.index = FALSE, contribution = FALSE, geometric = TRUE, rebalance_on = c(NA, &#34;years&#34;, &#34;quarters&#34;, &#34;months&#34;, &#34;weeks&#34;, &#34;days&#34;), value = 1, verbose = FALSE, ...)&lt;/code&gt; calculates the returns of a portfolio with the same periodicity of the returns data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;R is an xts, vector, matrix, data frame, timeSeries or zoo object of asset returns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weights is a time series or single-row matrix/vector containing asset weights, as decimal percentages, treated as beginning of period weights.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wealth.index is a logical indicating whether to return a wealth index. The default is FALSE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if contribution is TRUE, add the weighted return contributed by the asset in a given period. The default is FALSE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;geometric utilize geometric chaining (TRUE) or simple/arithmetic (FALSE) to aggregate returns. The default is TRUE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rebalance_on defaults to ânoneâ; alternatively âdailyâ âweeklyâ âmonthlyâ âannualâ to specify calendar-period rebalancing supported by endpoints. Ignored if weights is an xts object that specifies the rebalancing dates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;values is the beginning-of-period total portfolio value. This is used for calculating position value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if verbose is TRUE, return a list of intermediary calculations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-the-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in the tidyverse&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# User vectorize if else statements to assign weights according to the asset column
potfolio_returns_dplyr_byhand &amp;lt;- asset_returns_long %&amp;gt;%
  group_by(asset) %&amp;gt;%
  mutate(
    weights = dplyr::case_when(
      asset == symbols[[1]] ~ weights[[1]],
      asset == symbols[[2]] ~ weights[[2]],
      asset == symbols[[3]] ~ weights[[3]],
      asset == symbols[[4]] ~ weights[[4]],
      asset == symbols[[5]] ~ weights[[5]]
    ),
    weighted_returns = weights * returns
  ) %&amp;gt;%
  # Group by date
  # We need to group by date so that the aggregate sum() function is carried out by month
  # For each date, the original series has 5 weighted returns, one for each ETF
  # The results should be 1 portfolio return (the sum of the 5 weighted returns) for each month
  group_by(date) %&amp;gt;%
  # Compute monthly portfolio returns
  dplyr::summarize(Monthly_portfolio_returns = sum(weighted_returns))
# Examine
head(potfolio_returns_dplyr_byhand, 5)
# A tibble: 5 Ã 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;summarize(.data, ..., .groups = NULL)&lt;/code&gt; creates a new data frame. It will have one (or more) rows for each combination of grouping variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-tidyquant&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in tidyquant&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use tibble from the tidyverse but function from tidyquant
portfolio_returns_tq_rebalanced_monthly_method_1 &amp;lt;- asset_returns_long %&amp;gt;%
  tidyquant::tq_portfolio(
    assets_col = asset,
    returns_col = returns,
    weights = weights,
    col_rename = &amp;quot;Monthly_portfolio_returns&amp;quot;,
    rebalance_on = &amp;quot;months&amp;quot;
  )
# Examine
head(portfolio_returns_tq_rebalanced_monthly_method_1, 5)
# A tibble: 5 Ã 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function &lt;code&gt;check_weights(weights)&lt;/code&gt; from the &lt;code&gt;LDATS&lt;/code&gt; package checks that the vector of document weights is numeric and positive and inform the user if the average weight isnât 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function &lt;code&gt;tq_portfolio(data, assets_col, returns_col, weights = NULL, col_rename = NULL, ...)&lt;/code&gt; aggregates a group of returns by asset into portfolio returns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;data should be a tibble (tidy data frame) of returns in tidy format (i.e long format).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;assets_col is the column with assets (securities)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;returns_col is the column with returns&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weights argument take the optional parameter for the asset weights, which can be passed as a numeric vector the length of the number of assets or a two column tibble with asset names in first column and weights in second column.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;col_rename takes a string or character vector containing names that can be used to quickly rename columns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;â¦ are additional parameters passed to &lt;code&gt;PerformanceAnalytics::Returns.portfolio&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An alternative way to load data is to using &lt;code&gt;tidquant&lt;/code&gt; wrapper function, which automatically coerces the returns into a long tidy format:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load data
asset_returns_tq &amp;lt;- tidyquant::tq_get(
  x = symbols,
  get = &amp;quot;stock.prices&amp;quot;,
  from = &amp;quot;2012-12-31&amp;quot;,
  to = &amp;quot;2021-7-31&amp;quot;,
) %&amp;gt;%
  # The asset column is named symbol by default (see body(tidyquant::tq_get))
  dplyr::group_by(symbol) %&amp;gt;%
  tidyquant::tq_transmute(
    select = adjusted,
    col_rename = &amp;quot;returns&amp;quot;,
    # This function is from quantmod
    mutate_fun = periodReturn,
    # These are argument are passed along to the mutate function quantmod::periodReturn
    period = &amp;quot;monthly&amp;quot;,
    type = &amp;quot;arithmetic&amp;quot;,
    leading = FALSE,
    # This argument is passed along to xts::to.period, which is wrapped by quantmod::periodReturn
    indexAt = &amp;quot;lastof&amp;quot;
  ) %&amp;gt;% 
  dplyr::rename(asset = symbol) %&amp;gt;% 
  na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;tq_get(x, get = &#34;stock.prices&#34;, complete_cases = TRUE, ...)&lt;/code&gt; gets data in tibble format. The most important argument is perhaps the dot-dot-dot, since these are the argument passed to the underlying functions that &lt;code&gt;tq_get()&lt;/code&gt; uses. There could be multiple layers of wrapper functions and so read the documentations carefully.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A possibly more useful method of aggregating asset returns to potfolio returns then is to use a tibble of symbols and weights that are mapped to the portfolio:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a tibble of weights
weights_tibble &amp;lt;- tibble(
    asset = symbols,
    weights = weights
)
# Map the weights to the returns column using the asset column as the identifier
portfolio_returns_tq_rebalanced_monthly_method_2 &amp;lt;- asset_returns_tq %&amp;gt;% 
tidyquant::tq_portfolio(
  assets_col = asset,
  returns_col = returns,
  weights = weights_tibble,
  col_rename = &amp;quot;Monthly_portfolio_returns&amp;quot;,
  rebalance_on = &amp;quot;months&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-and-contrast-these-four-methods&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare and Contrast these four methods&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;four_computational_methods &amp;lt;- potfolio_returns_dplyr_byhand %&amp;gt;%
  # Rename the column
  rename(tidyverse_method = Monthly_portfolio_returns) %&amp;gt;%
  # Create three new columns that contain results for other methods
  dplyr::mutate(
    equation_byhand = zoo::coredata(x = portfolio_returns_by_hand),
    tq_method_1 = portfolio_returns_tq_rebalanced_monthly_method_1[[&amp;quot;Monthly_portfolio_returns&amp;quot;]],
    tq_method_2 = portfolio_returns_tq_rebalanced_monthly_method_2[[&amp;quot;Monthly_portfolio_returns&amp;quot;]],
    xts_method = zoo::coredata(portfolio_returns_xts_rebalanced_monthly)
  ) %&amp;gt;%
  purrr::modify_if(.p = is.numeric, .f = ~ round(x = .x, digits = 7))
# Examine
head(four_computational_methods, 10)
# A tibble: 10 Ã 6
   date       tidyverse_method equation_byhand[,&amp;quot;Monthlâ¦ tq_method_1 tq_method_2
   &amp;lt;date&amp;gt;                &amp;lt;dbl&amp;gt;                     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
 1 2013-01-31           0.0455                    0.0455      0.0455      0.0455
 2 2013-02-28           0.0102                    0.0102      0.0102      0.0102
 3 2013-03-31           0.0332                    0.0332      0.0332      0.0332
 4 2013-04-30           0.0154                    0.0154      0.0154      0.0154
 5 2013-05-31           0.0200                    0.0200      0.0200      0.0200
 6 2013-06-30          -0.0131                   -0.0131     -0.0131     -0.0131
 7 2013-07-31           0.0509                    0.0509      0.0509      0.0509
 8 2013-08-31          -0.0292                   -0.0292     -0.0292     -0.0292
 9 2013-09-30           0.0436                    0.0436      0.0436      0.0436
10 2013-10-31           0.0406                    0.0406      0.0406      0.0406
# â¦ with 1 more variable: xts_method &amp;lt;dbl[,1]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;coredata(x, ...)&lt;/code&gt; is a generic function for extracting the core data contained in, a (more complex) object and replacing it. The replacement function is &lt;code&gt;coredata&amp;lt;-&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
