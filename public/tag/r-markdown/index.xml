<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Markdown | Yang (Ken) Wu</title>
    <link>YangWu1227.github.io/tag/r-markdown/</link>
      <atom:link href="YangWu1227.github.io/tag/r-markdown/index.xml" rel="self" type="application/rss+xml" />
    <description>R Markdown</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Yang Wu</copyright><lastBuildDate>Tue, 01 Dec 2020 21:13:14 -0500</lastBuildDate>
    <image>
      <url>/YangWu1227.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>R Markdown</title>
      <link>YangWu1227.github.io/tag/r-markdown/</link>
    </image>
    
    <item>
      <title>Portfolio Optimization &amp; Returns</title>
      <link>YangWu1227.github.io/post/portfolio-returns-and-optimization/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      <guid>YangWu1227.github.io/post/portfolio-returns-and-optimization/</guid>
      <description>
&lt;script src=&#34;YangWu1227.github.io/post/portfolio-returns-and-optimization/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;optimal-weights-for-the-five-asset-portfolio-minimum-variance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal Weights for the five-asset portfolio (Minimum Variance)&lt;/h2&gt;
&lt;p&gt;We employ Markowitz’s Mean-Variance model as the framework for computing optimal weights, essentially treating this as an “unconstrained” problem. The objective of this optimization problem is one of minimization:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\text{Minimize}\hspace{2mm}(\sigma^{2}=\vec{W}^{T}\sum\vec{W}))
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to the sum of weights constraint and the box constraint:
&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{N} W_{i}=1 \quad \text { and } \hspace{3mm} \varepsilon_{i} \leq W_{i} \leq \delta_{i}
\]&lt;/span&gt;
where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\varepsilon_{i}=0.05 \hspace{3mm} \delta_{i}=0.6\)&lt;/span&gt; are the lower and upper bounds for the weights &lt;span class=&#34;math inline&#34;&gt;\(W_{i}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The minimization problem is a quadratic problem with linear constraints, since the variance formula is a quadratic function and the constraints are linear functions; this type of problem is well suited to be solved using a quadratic programming solver. The &lt;code&gt;PortfolioAnalytics&lt;/code&gt; package uses &lt;code&gt;ROI.plugin.quadprog&lt;/code&gt;, a plug-in for the “R” Optimization Infrastructure, to solve the problem. The solver can be specified with the optimize_method argument in &lt;code&gt;optimize.portfolio()&lt;/code&gt;. If optimize_method = “ROI” is specified, a default solver will be selected based on the optimization problem. The &lt;code&gt;glpk&lt;/code&gt; solver is the default solver for LP and MILP optimization problems. The
&lt;code&gt;quadprog&lt;/code&gt; solver is the default solver for QP optimization problems.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;implementation-in-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementation in R&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create Portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Examine the monthly simple returns for our five ETF&amp;#39;s
head(x = asset_returns_xts, 5)
                  SPY         EFA         IJS          EEM           AGG
2013-01-31 0.05119052  0.03728466 0.053516334 -0.002930946 -0.0062116229
2013-02-28 0.01275821 -0.01288577 0.016306731 -0.022840526  0.0059086208
2013-03-31 0.03797176  0.01305398 0.041079862 -0.010182972  0.0009852202
2013-04-30 0.01921213  0.05018653 0.001223168  0.012158139  0.0096857757
2013-05-31 0.02360972 -0.03019051 0.042869516 -0.048279085 -0.0200111149
# Create Portfolio object which is a R list object
min_var_portfolio &amp;lt;- PortfolioAnalytics::portfolio.spec(assets = symbols)
typeof(min_var_portfolio)
[1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add constraints to the portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the full investment constraint that specifies the weights must sum to 1
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = min_var_portfolio,
  type = &amp;quot;full_investment&amp;quot;
)
# Examine the constraint element by extracting min_var_portfolio[[&amp;quot;constraints&amp;quot;]][[1]]
str(pluck(.x = min_var_portfolio, &amp;quot;constraints&amp;quot;, 1))
List of 6
 $ type   : chr &amp;quot;full_investment&amp;quot;
 $ enabled: logi TRUE
 $ message: logi FALSE
 $ min_sum: num 1
 $ max_sum: num 1
 $ call   : language PortfolioAnalytics::add.constraint(portfolio = min_var_portfolio, type = &amp;quot;full_investment&amp;quot;)
 - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;weight_sum_constraint&amp;quot; &amp;quot;constraint&amp;quot;
# Add the box constraint that ensure the weights are between 0.1 and 0.6
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = min_var_portfolio,
  type = &amp;quot;box&amp;quot;, min = 0.05, max = 0.6
)
# Examine the constraint element by extracting min_var_portfolio[[&amp;quot;constraints&amp;quot;]][[2]]
str(pluck(.x = min_var_portfolio, &amp;quot;constraints&amp;quot;, 2))
List of 5
 $ type   : chr &amp;quot;box&amp;quot;
 $ enabled: logi TRUE
 $ min    : Named num [1:5] 0.05 0.05 0.05 0.05 0.05
  ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;SPY&amp;quot; &amp;quot;EFA&amp;quot; &amp;quot;IJS&amp;quot; &amp;quot;EEM&amp;quot; ...
 $ max    : Named num [1:5] 0.6 0.6 0.6 0.6 0.6
  ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;SPY&amp;quot; &amp;quot;EFA&amp;quot; &amp;quot;IJS&amp;quot; &amp;quot;EEM&amp;quot; ...
 $ call   : language PortfolioAnalytics::add.constraint(portfolio = min_var_portfolio, type = &amp;quot;box&amp;quot;,      min = 0.05, max = 0.6)
 - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;box_constraint&amp;quot; &amp;quot;constraint&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add objective function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add objective to minimize variance
min_var_portfolio &amp;lt;- PortfolioAnalytics::add.objective(
  portfolio = min_var_portfolio,
  # Minimize risk
  type = &amp;quot;risk&amp;quot;,
  # A character corresponding to a function name, var()
  name = &amp;quot;var&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run the optimization
global_min_portfolio &amp;lt;- PortfolioAnalytics::optimize.portfolio(
  R = asset_returns_xts,
  portfolio = min_var_portfolio,
  # This defaults to the &amp;quot;quadprog&amp;quot; solver
  optimize_method = &amp;quot;quadprog&amp;quot;,
  # Return additional information on the path or portfolios searched
  trace = TRUE
)
# Examine returned portfolio list object
global_min_portfolio
***********************************
PortfolioAnalytics Optimization
***********************************

Call:
PortfolioAnalytics::optimize.portfolio(R = asset_returns_xts, 
    portfolio = min_var_portfolio, optimize_method = &amp;quot;quadprog&amp;quot;, 
    trace = TRUE)

Optimal Weights:
   SPY    EFA    IJS    EEM    AGG 
0.2215 0.0785 0.0500 0.0500 0.6000 

Objective Measure:
 StdDev 
0.01655 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;optimal-weights-for-the-five-asset-portfolio-maximum-expected-return&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal Weights for the five-asset portfolio (Maximum Expected Return)&lt;/h2&gt;
&lt;p&gt;The objective may also be one of maximization:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
\text{Maximize}\hspace{2mm}(\vec{\mu}^{T}\vec{W})
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to the sum of weights constraint and the box constraint:
&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{N} W_{i}=1 \quad \text { and } \hspace{3mm} \varepsilon_{i} \leq W_{i} \leq \delta_{i}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The optimization in this case is a linear programming problem, since the portfolio expected return formula is a linear function. This is best tackled using a linear programming solver. The package &lt;code&gt;PortfolioAnalytics&lt;/code&gt; uses the ROI package with the &lt;code&gt;glpk plugin&lt;/code&gt;, the GNU Linear Programming toolkit of R’s Optimization Infrastructure.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;implementation-in-r-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementation in R&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create portfolio object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create Portfolio object
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::portfolio.spec(assets = symbols)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add constraints to the object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add the full investment constraint that specifies the weights must sum to 1
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = max_exp_return_portfolio,
  type = &amp;quot;full_investment&amp;quot;
)
# Add the box constraint that ensure the weights are between 0.1 and 0.6
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.constraint(
  portfolio = max_exp_return_portfolio,
  type = &amp;quot;box&amp;quot;, min = 0.05, max = 0.6
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add objective function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add objective to maximize mean returns
max_exp_return_portfolio &amp;lt;- PortfolioAnalytics::add.objective(
  portfolio = max_exp_return_portfolio,
  # Maximize expected returns
  type = &amp;quot;return&amp;quot;,
  # A character corresponding to a function name, mean()
  name = &amp;quot;mean&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run the optimization
global_max_portfolio &amp;lt;- PortfolioAnalytics::optimize.portfolio(
  R = asset_returns_xts,
  portfolio = max_exp_return_portfolio,
  # This defaults to the &amp;quot;glpk&amp;quot; solver
  optimize_method = &amp;quot;glpk&amp;quot;,
  # Return additional information on the path or portfolios searched
  trace = TRUE
)
# Examine returned portfolio list object
global_max_portfolio
***********************************
PortfolioAnalytics Optimization
***********************************

Call:
PortfolioAnalytics::optimize.portfolio(R = asset_returns_xts, 
    portfolio = max_exp_return_portfolio, optimize_method = &amp;quot;glpk&amp;quot;, 
    trace = TRUE)

Optimal Weights:
 SPY  EFA  IJS  EEM  AGG 
0.60 0.05 0.25 0.05 0.05 

Objective Measure:
   mean 
0.01161 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;building-a-portfolio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Building a portfolio&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set optimal weights
weights &amp;lt;- pluck(.x = global_max_portfolio, &amp;quot;weights&amp;quot;)
# Check if the weights and symbols align
tibble(weights, symbols)
# A tibble: 5 × 2
  weights symbols
    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
1   0.6   SPY    
2   0.05  EFA    
3   0.250 IJS    
4   0.05  EEM    
5   0.05  AGG    
# Ensure that the weights vector sums up to 1
tibble(weights, symbols) %&amp;gt;%
  dplyr::summarize(total_weight = sum(weights))
# A tibble: 1 × 1
  total_weight
         &amp;lt;dbl&amp;gt;
1            1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The portfolio return in month, &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, is given by:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
r_{\text{portfolio,t}}=\sum_{i=1}^{5}W_{i}r^{cc}_{i,t}
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;monthly-portfolio-returns-by-hand&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns by hand&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute by hand
portfolio_returns_by_hand &amp;lt;-
  (weights[[1]] * asset_returns_xts[, 1]) +
  (weights[[2]] * asset_returns_xts[, 2]) +
  (weights[[3]] * asset_returns_xts[, 3]) +
  (weights[[4]] * asset_returns_xts[, 4]) +
  (weights[[5]] * asset_returns_xts[, 5])
# Name the series
portfolio_returns_by_hand &amp;lt;- `names&amp;lt;-`(portfolio_returns_by_hand, &amp;quot;Monthly portfolio returns&amp;quot;)
# Examine
head(portfolio_returns_by_hand, 5)
           Monthly portfolio returns
2013-01-31                0.04550050
2013-02-28                0.01024073
2013-03-31                0.03324583
2013-04-30                0.01543459
2013-05-31                0.01995918&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-xts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in xts&lt;/h3&gt;
&lt;p&gt;Note that re-balancing the weights every month is unrealistic; in reality, we could choose annual overbalancing. For this case study, however, we will re-balance monthly to be consistent with our brute force computation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute monthly portfolio returns
portfolio_returns_xts_rebalanced_monthly &amp;lt;-
  PerformanceAnalytics::Return.portfolio(
    R = asset_returns_xts,
    weights = weights,
    # Monthly re-balancing
    reblance_on = &amp;quot;months&amp;quot;,
    # Use simple/arithmetic chaining to aggregate returns
    geometric = FALSE
  ) %&amp;gt;%
  `colnames&amp;lt;-`(&amp;quot;Monthly_portfolio_returns&amp;quot;)
# Examine
head(portfolio_returns_xts_rebalanced_monthly, 5)
           Monthly_portfolio_returns
2013-01-31                0.04550050
2013-02-28                0.01024073
2013-03-31                0.03324583
2013-04-30                0.01543459
2013-05-31                0.01995918&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function &lt;code&gt;Return.portfolio(R, weights = NULL, wealth.index = FALSE, contribution = FALSE, geometric = TRUE, rebalance_on = c(NA, &#34;years&#34;, &#34;quarters&#34;, &#34;months&#34;, &#34;weeks&#34;, &#34;days&#34;), value = 1, verbose = FALSE, ...)&lt;/code&gt; calculates the returns of a portfolio with the same periodicity of the returns data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;R is an xts, vector, matrix, data frame, timeSeries or zoo object of asset returns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weights is a time series or single-row matrix/vector containing asset weights, as decimal percentages, treated as beginning of period weights.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wealth.index is a logical indicating whether to return a wealth index. The default is FALSE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if contribution is TRUE, add the weighted return contributed by the asset in a given period. The default is FALSE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;geometric utilize geometric chaining (TRUE) or simple/arithmetic (FALSE) to aggregate returns. The default is TRUE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rebalance_on defaults to “none”; alternatively “daily” “weekly” “monthly” “annual” to specify calendar-period rebalancing supported by endpoints. Ignored if weights is an xts object that specifies the rebalancing dates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;values is the beginning-of-period total portfolio value. This is used for calculating position value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if verbose is TRUE, return a list of intermediary calculations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-the-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in the tidyverse&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# User vectorize if else statements to assign weights according to the asset column
potfolio_returns_dplyr_byhand &amp;lt;- asset_returns_long %&amp;gt;%
  group_by(asset) %&amp;gt;%
  mutate(
    weights = dplyr::case_when(
      asset == symbols[[1]] ~ weights[[1]],
      asset == symbols[[2]] ~ weights[[2]],
      asset == symbols[[3]] ~ weights[[3]],
      asset == symbols[[4]] ~ weights[[4]],
      asset == symbols[[5]] ~ weights[[5]]
    ),
    weighted_returns = weights * returns
  ) %&amp;gt;%
  # Group by date
  # We need to group by date so that the aggregate sum() function is carried out by month
  # For each date, the original series has 5 weighted returns, one for each ETF
  # The results should be 1 portfolio return (the sum of the 5 weighted returns) for each month
  group_by(date) %&amp;gt;%
  # Compute monthly portfolio returns
  dplyr::summarize(Monthly_portfolio_returns = sum(weighted_returns))
# Examine
head(potfolio_returns_dplyr_byhand, 5)
# A tibble: 5 × 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;summarize(.data, ..., .groups = NULL)&lt;/code&gt; creates a new data frame. It will have one (or more) rows for each combination of grouping variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;monthly-portfolio-returns-in-tidyquant&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Monthly portfolio returns in tidyquant&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Use tibble from the tidyverse but function from tidyquant
portfolio_returns_tq_rebalanced_monthly_method_1 &amp;lt;- asset_returns_long %&amp;gt;%
  tidyquant::tq_portfolio(
    assets_col = asset,
    returns_col = returns,
    weights = weights,
    col_rename = &amp;quot;Monthly_portfolio_returns&amp;quot;,
    rebalance_on = &amp;quot;months&amp;quot;
  )
# Examine
head(portfolio_returns_tq_rebalanced_monthly_method_1, 5)
# A tibble: 5 × 2
  date       Monthly_portfolio_returns
  &amp;lt;date&amp;gt;                         &amp;lt;dbl&amp;gt;
1 2013-01-31                    0.0455
2 2013-02-28                    0.0102
3 2013-03-31                    0.0332
4 2013-04-30                    0.0154
5 2013-05-31                    0.0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function &lt;code&gt;check_weights(weights)&lt;/code&gt; from the &lt;code&gt;LDATS&lt;/code&gt; package checks that the vector of document weights is numeric and positive and inform the user if the average weight isn’t 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function &lt;code&gt;tq_portfolio(data, assets_col, returns_col, weights = NULL, col_rename = NULL, ...)&lt;/code&gt; aggregates a group of returns by asset into portfolio returns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;data should be a tibble (tidy data frame) of returns in tidy format (i.e long format).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;assets_col is the column with assets (securities)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;returns_col is the column with returns&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weights argument take the optional parameter for the asset weights, which can be passed as a numeric vector the length of the number of assets or a two column tibble with asset names in first column and weights in second column.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;col_rename takes a string or character vector containing names that can be used to quickly rename columns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;… are additional parameters passed to &lt;code&gt;PerformanceAnalytics::Returns.portfolio&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An alternative way to load data is to using &lt;code&gt;tidquant&lt;/code&gt; wrapper function, which automatically coerces the returns into a long tidy format:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load data
asset_returns_tq &amp;lt;- tidyquant::tq_get(
  x = symbols,
  get = &amp;quot;stock.prices&amp;quot;,
  from = &amp;quot;2012-12-31&amp;quot;,
  to = &amp;quot;2021-7-31&amp;quot;,
) %&amp;gt;%
  # The asset column is named symbol by default (see body(tidyquant::tq_get))
  dplyr::group_by(symbol) %&amp;gt;%
  tidyquant::tq_transmute(
    select = adjusted,
    col_rename = &amp;quot;returns&amp;quot;,
    # This function is from quantmod
    mutate_fun = periodReturn,
    # These are argument are passed along to the mutate function quantmod::periodReturn
    period = &amp;quot;monthly&amp;quot;,
    type = &amp;quot;arithmetic&amp;quot;,
    leading = FALSE,
    # This argument is passed along to xts::to.period, which is wrapped by quantmod::periodReturn
    indexAt = &amp;quot;lastof&amp;quot;
  ) %&amp;gt;% 
  dplyr::rename(asset = symbol) %&amp;gt;% 
  na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;tq_get(x, get = &#34;stock.prices&#34;, complete_cases = TRUE, ...)&lt;/code&gt; gets data in tibble format. The most important argument is perhaps the dot-dot-dot, since these are the argument passed to the underlying functions that &lt;code&gt;tq_get()&lt;/code&gt; uses. There could be multiple layers of wrapper functions and so read the documentations carefully.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A possibly more useful method of aggregating asset returns to potfolio returns then is to use a tibble of symbols and weights that are mapped to the portfolio:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a tibble of weights
weights_tibble &amp;lt;- tibble(
    asset = symbols,
    weights = weights
)
# Map the weights to the returns column using the asset column as the identifier
portfolio_returns_tq_rebalanced_monthly_method_2 &amp;lt;- asset_returns_tq %&amp;gt;% 
tidyquant::tq_portfolio(
  assets_col = asset,
  returns_col = returns,
  weights = weights_tibble,
  col_rename = &amp;quot;Monthly_portfolio_returns&amp;quot;,
  rebalance_on = &amp;quot;months&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-and-contrast-these-four-methods&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compare and Contrast these four methods&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;four_computational_methods &amp;lt;- potfolio_returns_dplyr_byhand %&amp;gt;%
  # Rename the column
  rename(tidyverse_method = Monthly_portfolio_returns) %&amp;gt;%
  # Create three new columns that contain results for other methods
  dplyr::mutate(
    equation_byhand = zoo::coredata(x = portfolio_returns_by_hand),
    tq_method_1 = portfolio_returns_tq_rebalanced_monthly_method_1[[&amp;quot;Monthly_portfolio_returns&amp;quot;]],
    tq_method_2 = portfolio_returns_tq_rebalanced_monthly_method_2[[&amp;quot;Monthly_portfolio_returns&amp;quot;]],
    xts_method = zoo::coredata(portfolio_returns_xts_rebalanced_monthly)
  ) %&amp;gt;%
  purrr::modify_if(.p = is.numeric, .f = ~ round(x = .x, digits = 7))
# Examine
head(four_computational_methods, 10)
# A tibble: 10 × 6
   date       tidyverse_method equation_byhand[,&amp;quot;Monthl… tq_method_1 tq_method_2
   &amp;lt;date&amp;gt;                &amp;lt;dbl&amp;gt;                     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
 1 2013-01-31           0.0455                    0.0455      0.0455      0.0455
 2 2013-02-28           0.0102                    0.0102      0.0102      0.0102
 3 2013-03-31           0.0332                    0.0332      0.0332      0.0332
 4 2013-04-30           0.0154                    0.0154      0.0154      0.0154
 5 2013-05-31           0.0200                    0.0200      0.0200      0.0200
 6 2013-06-30          -0.0131                   -0.0131     -0.0131     -0.0131
 7 2013-07-31           0.0509                    0.0509      0.0509      0.0509
 8 2013-08-31          -0.0292                   -0.0292     -0.0292     -0.0292
 9 2013-09-30           0.0436                    0.0436      0.0436      0.0436
10 2013-10-31           0.0406                    0.0406      0.0406      0.0406
# … with 1 more variable: xts_method &amp;lt;dbl[,1]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;coredata(x, ...)&lt;/code&gt; is a generic function for extracting the core data contained in, a (more complex) object and replacing it. The replacement function is &lt;code&gt;coredata&amp;lt;-&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
